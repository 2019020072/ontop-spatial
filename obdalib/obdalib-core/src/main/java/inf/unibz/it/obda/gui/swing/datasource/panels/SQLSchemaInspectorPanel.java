/***
 * Copyright (c) 2008, Mariano Rodriguez-Muro.
 * All rights reserved.
 *
 * The OBDA-API is licensed under the terms of the Lesser General Public
 * License v.3 (see OBDAAPI_LICENSE.txt for details). The components of this
 * work include:
 * 
 * a) The OBDA-API developed by the author and licensed under the LGPL; and, 
 * b) third-party components licensed under terms that may be different from 
 *   those of the LGPL.  Information about such licenses can be found in the 
 *   file named OBDAAPI_3DPARTY-LICENSES.txt.
 */

package inf.unibz.it.obda.gui.swing.datasource.panels;

import inf.unibz.it.obda.api.controller.DatasourcesController;
import inf.unibz.it.obda.api.datasource.JDBCConnectionManager;
import inf.unibz.it.obda.domain.DataSource;
import inf.unibz.it.obda.gui.swing.datasource.DatasourceSelectorListener;
import inf.unibz.it.obda.gui.swing.exception.NoDatasourceSelectedException;
import inf.unibz.it.obda.rdbmsgav.domain.RDBMSsourceParameterConstants;
import java.awt.BorderLayout;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.BorderFactory;

import javax.swing.DefaultListSelectionModel;
import javax.swing.JButton;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author  mariano
 */
public class SQLSchemaInspectorPanel extends javax.swing.JPanel implements DatasourceSelectorListener {
    
	/**
	 * 
	 */
	private static final long	serialVersionUID	= 6497114195036386873L;

	private static final int					TABLE_ROW_HEIGHT	= 17;

	private static final int					TABLE_COLUMN_WITH	= 200;

	private DataSource selectedSource;
	
	private DatasourcesController dscontroller = null;
	
    /** Creates new form SQLSchemaInspectorPanel */
    public SQLSchemaInspectorPanel(DatasourcesController dsController) {
    	this.dscontroller = dsController;

        initComponents();
        addPopupMenu();
        /***********************************************************************
		 * Setting up the database utilities
		 */

		tblRelations.getSelectionModel().setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
		tblRelations.getSelectionModel().addListSelectionListener(new RowListener());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlButtons = new JPanel();
        cmdRefresh = new JButton();
        cmdDropViews = new JButton();
        splRelationsColumns = new JSplitPane();
        scrRelationsTable = new JScrollPane();
        tblRelations = new JTable();
        scrAttributesTable = new JScrollPane();
        tblAttributes = new JTable();

        setLayout(new BorderLayout());

        pnlButtons.setAutoscrolls(true);
        pnlButtons.setMinimumSize(new Dimension(100, 0));
        pnlButtons.setPreferredSize(new Dimension(100, 35));
        pnlButtons.setLayout(new FlowLayout(FlowLayout.RIGHT));

        cmdRefresh.setText("Refresh");
        cmdRefresh.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmdRefreshActionPerformed(evt);
            }
        });
        pnlButtons.add(cmdRefresh);

        cmdDropViews.setText("Drop views");
        cmdDropViews.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmdDropViewsActionPerformed(evt);
            }
        });
        pnlButtons.add(cmdDropViews);

        add(pnlButtons, BorderLayout.NORTH);

        splRelationsColumns.setOrientation(JSplitPane.VERTICAL_SPLIT);
        splRelationsColumns.setResizeWeight(0.5);
        splRelationsColumns.setMinimumSize(new Dimension(100, 100));
        splRelationsColumns.setPreferredSize(new Dimension(100, 100));

        scrRelationsTable.setBorder(BorderFactory.createTitledBorder("Relations"));
        scrRelationsTable.setMinimumSize(new Dimension(250, 100));
        scrRelationsTable.setOpaque(false);
        scrRelationsTable.setPreferredSize(new Dimension(250, 100));

        tblRelations.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Relation Name", "Row Count"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRelations.setPreferredSize(new Dimension(150, 999999));
        scrRelationsTable.setViewportView(tblRelations);

        splRelationsColumns.setTopComponent(scrRelationsTable);

        scrAttributesTable.setBackground(UIManager.getDefaults().getColor("InternalFrame.borderColor"));
        scrAttributesTable.setBorder(BorderFactory.createTitledBorder("Columns"));
        scrAttributesTable.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrAttributesTable.setMinimumSize(new Dimension(250, 100));
        scrAttributesTable.setPreferredSize(new Dimension(250, 100));

        tblAttributes.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field", "Type", "Null", "Key", "Default", "Extra"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAttributes.setPreferredSize(new Dimension(150, 2000));
        scrAttributesTable.setViewportView(tblAttributes);

        splRelationsColumns.setBottomComponent(scrAttributesTable);

        add(splRelationsColumns, BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdDropViewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDropViewsActionPerformed
    	EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					int result = JOptionPane.showConfirmDialog(null,
							"This will delete ALL views named view_XXXX\n are you sure you want to proceed?");
					if ((result == JOptionPane.CANCEL_OPTION) || (result == JOptionPane.NO_OPTION)) {
						return;
					}
					JDBCConnectionManager man = JDBCConnectionManager.getJDBCConnectionManager();
					if(!man.isConnectionAlive(selectedSource.getSourceID())){
						man.createConnection(selectedSource);
					}
					ResultSet set = man.getRelationsResultSet(selectedSource);
					RelationsResultSetTableModel model = new RelationsResultSetTableModel(set, selectedSource);
					int tablescounter = model.getRowCount();

					if (selectedSource == null) {
						throw new NoDatasourceSelectedException("No source selected");
					}
					String driverstr = selectedSource.getParameter(RDBMSsourceParameterConstants.DATABASE_DRIVER);
					String url = selectedSource.getParameter(RDBMSsourceParameterConstants.DATABASE_URL);
					String dbname = selectedSource.getParameter(RDBMSsourceParameterConstants.DATABASE_NAME);
					String username = selectedSource.getParameter(RDBMSsourceParameterConstants.DATABASE_USERNAME);
					String password = selectedSource.getParameter(RDBMSsourceParameterConstants.DATABASE_PASSWORD);

					Class driver = Class.forName(driverstr);
					String sqlurl = "";
					if (url.charAt(url.length() - 1) == '/') {
						sqlurl = url + dbname;
					} else {
						sqlurl = url + "/" + dbname;
					}
					//System.out.println(sqlurl);
					java.sql.Connection connection = DriverManager.getConnection(sqlurl, username, password);
					connection.setAutoCommit(false);

					for (int i = 0; i < tablescounter; i++) {
						String tablename = (String) model.getValueAt(i, 0);
						if (tablename.length() < 5)
							continue;
						if (tablename.substring(0, 5).equals("view_")) {
							dropview(tablename, connection);
						}
					}
					connection.close();
				} catch (SQLException ex) {

					ex.printStackTrace(System.err);
					JOptionPane.showMessageDialog(null, new String[] { ex.getClass().getName() + ": ", ex.getMessage() });

				} catch (ClassNotFoundException ex) {
					ex.printStackTrace(System.err);
					JOptionPane.showMessageDialog(null, new String[] { // Display
							// a
									// 2-line
									// message
									"JDBC Driver Missing. Make sure the JDBC jar", "is accesible in the classpath." });

				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		});
    }//GEN-LAST:event_cmdDropViewsActionPerformed

    
	private void dropview(String viewname, Connection connection) throws NoDatasourceSelectedException, SQLException {
		Statement st = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
		st.executeUpdate("drop view " + viewname);
		st.close();
	}
	
	private void addPopupMenu(){
		JPopupMenu menu = new JPopupMenu();
		
		JMenuItem countAll = new JMenuItem(); 
		countAll.setText("count all");
		countAll.setToolTipText("Counts the number of rows in each table");
		countAll.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {

				Counter c = new Counter();
				c.start();
			}
			
		});
		menu.add(countAll);
		
//		JMenuItem countapprox = new JMenuItem(); 
//		countapprox.setText("count approximatly");
//		countapprox.setToolTipText("Counts approximatly the number of rows in the selected table");
//		countapprox.addActionListener(new ActionListener(){
//
//			@Override
//			public void actionPerformed(ActionEvent arg0) {
//				int row = relationsTable.getSelectedRow();
//				if(row != -1){
//					String s = relationsTable.getModel().getValueAt(row, 0).toString();
//					try {
//						String count = JDBCConnectionManager.getJDBCConnectionManager().getApprimateRowCount(s, dscontroller.getCurrentDataSource());
//						int i = count.indexOf(".");
//						if(i != -1){
//							count = count.substring(0, i);
//						}
//						relationsTable.getModel().setValueAt(count, row, 1);
//					} catch (NoDatasourceSelectedException e1) {
//						e1.printStackTrace();
//					} catch (ClassNotFoundException e1) {
//						e1.printStackTrace();
//					} catch (SQLException e1) {
//						e1.printStackTrace();
//					}
//				}
//				
//			}
//			
//		});
//		menu.add(countapprox);
		
		JMenuItem countrow = new JMenuItem(); 
		countrow.setText("count");
		countrow.setToolTipText("Counts the number of rows in the selected table");
		countrow.addActionListener(new ActionListener(){

//			@Override
			public void actionPerformed(ActionEvent e) {
				
				EventQueue.invokeLater(new Runnable() {
					public void run() {
							int row = tblRelations.getSelectedRow();
							if(row != -1){
								String s = tblRelations.getModel().getValueAt(row, 0).toString();
								try {
									String count = JDBCConnectionManager.getJDBCConnectionManager().getRowCount(s, selectedSource);
									tblRelations.getModel().setValueAt(count, row, 1);
								} catch (NoDatasourceSelectedException e1) {
									e1.printStackTrace();
								} catch (ClassNotFoundException e1) {
									e1.printStackTrace();
								} catch (SQLException e1) {
									e1.printStackTrace();
								}
							}
						}
					});
			}
		});
		menu.add(countrow);
		tblRelations.setComponentPopupMenu(menu);
	}
	
    private void cmdRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRefreshActionPerformed
    	EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					// DataSource current_datasource =
					// DatasourcesController.getInstance().getCurrentDataSource();
					// if (current_datasource == null) {
					// JOptionPane.showMessageDialog(null, "Select a data source
					// first");
					// return;
					// }
					// String driver =
					// current_datasource.getParameter(RDBMSsourceParameterConstants.DATABASE_DRIVER);
					// String url =
					// current_datasource.getParameter(RDBMSsourceParameterConstants.DATABASE_URL);
					// String dbname =
					// current_datasource.getParameter(RDBMSsourceParameterConstants.DATABASE_NAME);
					// String username =
					// current_datasource.getParameter(RDBMSsourceParameterConstants.DATABASE_USERNAME);
					// String password =
					// current_datasource.getParameter(RDBMSsourceParameterConstants.DATABASE_PASSWORD);
					
					TableModel oldmodel = tblRelations.getModel();
					if ((oldmodel != null) && (oldmodel instanceof RelationsResultSetTableModel)) {
						RelationsResultSetTableModel model = (RelationsResultSetTableModel)oldmodel;
						if (model != null) {
							try {
								model.close();
							} catch (Exception e) {
							}
							
						}
						((RelationsResultSetTableModel) oldmodel).close();
					}
					// RelationsResultSetTableModelFactory factory = new
					// RelationsResultSetTableModelFactory(driver, url + dbname,
					// username,
					// password);
					ResultSet set = JDBCConnectionManager.getJDBCConnectionManager().getRelationsResultSet(selectedSource);
					RelationsResultSetTableModel model = new RelationsResultSetTableModel(set, selectedSource);
					tblRelations.setModel(model);
					tblRelations.setPreferredSize(new Dimension(model.getColumnCount() * TABLE_COLUMN_WITH, model.getRowCount()
							* TABLE_ROW_HEIGHT));
				} catch (SQLException ex) {
					// If something goes wrong, clear the message line

					// Then display the error in a dialog box
					ex.printStackTrace(System.err);
					JOptionPane.showMessageDialog(null, new String[] { ex.getClass().getName() + ": ", ex.getMessage() });

				} catch (ClassNotFoundException ex) {
					JOptionPane.showMessageDialog(null, new String[] { // Display
							// a
									// 2-line
									// message
									"JDBC Driver Missing. Make sure the JDBC jar", "is accesible in the classpath." });

				} catch(NoDatasourceSelectedException e ) {
					JOptionPane.showMessageDialog(null, "Error: No data source has been selected. \nPlease select a data source in the data source selector and try again.");
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		});
    }//GEN-LAST:event_cmdRefreshActionPerformed
    

    @Override
    public void datasourceChanged(DataSource oldSource, DataSource newSource)
    {
      this.selectedSource = newSource;
    }
    
    /***************************************************************************
	 * Called when the relation table of the RDBMS inspector changed
	 */
	private class RowListener implements ListSelectionListener {
		public void valueChanged(ListSelectionEvent event) {
			if (event.getValueIsAdjusting()) {
				return;
			}
			int row = tblRelations.getSelectedRow();

			//final DataSource current_datasource = DatasourcesController.getInstance().getCurrentDataSource();
			final String relation = (String) tblRelations.getValueAt(row, 0);
			if (relation.equals(""))
				return;
			EventQueue.invokeLater(new Runnable() {
				public void run() {
					try {

						JDBCConnectionManager factory = JDBCConnectionManager.getJDBCConnectionManager();

						TableModel oldmodel = tblAttributes.getModel();

						if ((oldmodel != null) && (oldmodel instanceof ResultSetTableModel)) {
							ResultSetTableModel rstm = (ResultSetTableModel) oldmodel;
							rstm.close();
						}

						// ResultSetTableModel model =
						// factory.getResultSetTableModel("describe " + relation
						// + ";");
						ColumnInspectorTableModel model = factory.getTableDescriptionTableModel(selectedSource, relation);
						tblAttributes.setModel(model);
						tblAttributes.setPreferredSize(new Dimension(model.getColumnCount() * TABLE_COLUMN_WITH, model.getRowCount()
								* TABLE_ROW_HEIGHT));
					} catch (SQLException ex) {
						ex.printStackTrace(System.err);
						System.err.println(ex.getErrorCode());
						JOptionPane.showMessageDialog(null, new String[] { ex.getClass().getName() + ": ", ex.getMessage() });
					} catch (ClassNotFoundException ex) {
						ex.printStackTrace(System.err);
						JOptionPane.showMessageDialog(null, new String[] { "JDBC Driver Missing. Make sure the JDBC jar",
								"is accesible in the classpath." });

					} catch (Exception e) {
						e.printStackTrace(System.err);
					}
				}
			});
		}
	}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton cmdDropViews;
    private JButton cmdRefresh;
    private JPanel pnlButtons;
    private JScrollPane scrAttributesTable;
    private JScrollPane scrRelationsTable;
    private JSplitPane splRelationsColumns;
    private JTable tblAttributes;
    private JTable tblRelations;
    // End of variables declaration//GEN-END:variables
    
    private class Counter extends Thread{
    	
    	public void run (){
    		int rows = tblRelations.getRowCount();
			for(int i=0;i<rows; i++){
				String s = tblRelations.getModel().getValueAt(i, 0).toString();
				try {
					String count = JDBCConnectionManager.getJDBCConnectionManager().getRowCount(s, selectedSource);
					tblRelations.getModel().setValueAt(count, i, 1);
				} catch (NoDatasourceSelectedException e1) {
					e1.printStackTrace();
				} catch (ClassNotFoundException e1) {
					e1.printStackTrace();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			}
    	}
    }

}
