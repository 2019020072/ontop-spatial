/*
 * QuOntoConstraintsPanel.java
 * 
 * Created on November 15, 2008, 11:43 AM
 */

package inf.unibz.it.quonto.obda.swing;

import inf.unibz.it.dl.assertion.Assertion;
import inf.unibz.it.obda.api.controller.APIController;
import inf.unibz.it.obda.gui.swing.treemodel.AssertionTreeNode;
import inf.unibz.it.obda.gui.swing.treemodel.DefaultAssertionTreeNodeRenderer;
import inf.unibz.it.quonto.dl.assertion.DenialConstraint;
import inf.unibz.it.quonto.dl.assertion.EQLConstraint;
import inf.unibz.it.quonto.dl.assertion.IDConstraint;
import inf.unibz.it.quonto.obda.controller.DenialConstraintController;
import inf.unibz.it.quonto.obda.controller.EQLConstraintController;
import inf.unibz.it.quonto.obda.controller.IDConstraintController;
import inf.unibz.it.quonto.obda.swing.action.CheckDenialConstraintLogicalImplicationAction;
import inf.unibz.it.quonto.obda.swing.action.CheckIDConstraintLogicalImplicationAction;
import inf.unibz.it.quonto.obda.swing.treemodel.DenialConstraintControllerTreeModel;
import inf.unibz.it.quonto.obda.swing.treemodel.EQLConstraintControllerTreeModel;
import inf.unibz.it.quonto.obda.swing.treemodel.IDConstraintControllerTreeModel;
import inf.unibz.it.utils.swing.TextMessageDialog;

import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 * 
 * @author mariano
 */
public class QuOntoConstraintsPanel extends javax.swing.JPanel {

	DenialConstraintController	dcController		= null;

	IDConstraintController		idController		= null;

	EQLConstraintController		eqlController		= null;

	private static final long	serialVersionUID	= 1L;
	
	private CheckDenialConstraintLogicalImplicationAction actionCheckDCImpAction = null;
	
	private CheckIDConstraintLogicalImplicationAction actionCheckIDCImpAction = null;
	
	private APIController apic = null;
	

	/** Creates new form QuOntoConstraintsPanel */
	public QuOntoConstraintsPanel(APIController apic) {
		
		initComponents();
		dcController = (DenialConstraintController) apic.getController(DenialConstraint.class);
		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Denial Constraints");
		DefaultAssertionTreeNodeRenderer renderer = new DefaultAssertionTreeNodeRenderer();
		DenialConstraintControllerTreeModel dcTreeModel = new DenialConstraintControllerTreeModel(root, dcController, renderer);
		treeDenialConstraints.setModel(dcTreeModel);
		treeDenialConstraints.setRootVisible(false);

		idController = (IDConstraintController) apic.getController(IDConstraint.class);
		DefaultMutableTreeNode rootID = new DefaultMutableTreeNode("ID Constraints");
		DefaultAssertionTreeNodeRenderer rendererID = new DefaultAssertionTreeNodeRenderer();
		IDConstraintControllerTreeModel idTreeModel = new IDConstraintControllerTreeModel(rootID, idController, rendererID);
		treeIDConstraints.setModel(idTreeModel);
		treeIDConstraints.setRootVisible(false);

		eqlController = (EQLConstraintController) apic.getController(EQLConstraint.class);
		DefaultMutableTreeNode rootEQL = new DefaultMutableTreeNode("EQL Constraints for");
		DefaultAssertionTreeNodeRenderer rendererEQL = new DefaultAssertionTreeNodeRenderer();
		EQLConstraintControllerTreeModel eqlTreeModel = new EQLConstraintControllerTreeModel(rootEQL, eqlController, rendererEQL);
		treeEQLConstraints.setModel(eqlTreeModel);
		treeEQLConstraints.setRootVisible(false);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        constraintsTabbedPane = new javax.swing.JTabbedPane();
        panelIDConstraints = new javax.swing.JPanel();
        panelIDCEditor = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        fieldIDConstraint = new javax.swing.JTextArea();
        buttonAddIDConstraint = new javax.swing.JButton();
        buttonIDLogicalImplication = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        panelIDCTree = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        buttonDeleteIDConstraint = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        treeIDConstraints = new javax.swing.JTree();
        panelDenialConstraints = new javax.swing.JPanel();
        panelDCEditor = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        fieldDenialConstraint = new javax.swing.JTextArea();
        buttonAddDenialConstraint = new javax.swing.JButton();
        buttonDenailLogicalImplication = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        panelDCTree = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        buttonDeleteDenialConstraint = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeDenialConstraints = new javax.swing.JTree();
        panelEQLConstraints = new javax.swing.JPanel();
        panelEQLCEditor = new javax.swing.JPanel();
        labelNewEQLC = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        fieldEQLConstraint = new javax.swing.JTextArea();
        buttonAddEQLCosntraint = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        panelEQLCTree = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        buttonDeleteEQLConstraint = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        treeEQLConstraints = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        panelIDConstraints.setLayout(new java.awt.BorderLayout());

        panelIDCEditor.setBorder(javax.swing.BorderFactory.createTitledBorder("Constraint Editor"));
        panelIDCEditor.setLayout(new java.awt.GridBagLayout());

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("New constraint:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelIDCEditor.add(jLabel3, gridBagConstraints);

        jScrollPane5.setPreferredSize(new java.awt.Dimension(244, 84));

        fieldIDConstraint.setColumns(20);
        fieldIDConstraint.setRows(3);
        jScrollPane5.setViewportView(fieldIDConstraint);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        panelIDCEditor.add(jScrollPane5, gridBagConstraints);

        buttonAddIDConstraint.setText("Add");
        buttonAddIDConstraint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddIDConstraintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        panelIDCEditor.add(buttonAddIDConstraint, gridBagConstraints);

        buttonIDLogicalImplication.setText("Check Logical Implication");
        buttonIDLogicalImplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonIDLogicalImplicationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        panelIDCEditor.add(buttonIDLogicalImplication, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panelIDCEditor.add(jPanel2, gridBagConstraints);

        panelIDConstraints.add(panelIDCEditor, java.awt.BorderLayout.NORTH);

        panelIDCTree.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Constraints"));
        panelIDCTree.setLayout(new java.awt.BorderLayout());

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        buttonDeleteIDConstraint.setFocusable(false);
        buttonDeleteIDConstraint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDeleteIDConstraint.setLabel("Delete");
        buttonDeleteIDConstraint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonDeleteIDConstraint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteIDConstraintActionPerformed(evt);
            }
        });
        jToolBar2.add(buttonDeleteIDConstraint);

        panelIDCTree.add(jToolBar2, java.awt.BorderLayout.PAGE_START);

        treeIDConstraints.setFont(new java.awt.Font("Courier", 0, 14));
        jScrollPane2.setViewportView(treeIDConstraints);

        panelIDCTree.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        panelIDConstraints.add(panelIDCTree, java.awt.BorderLayout.CENTER);

        constraintsTabbedPane.addTab("ID Constraints", panelIDConstraints);

        panelDenialConstraints.setLayout(new java.awt.BorderLayout());

        panelDCEditor.setBorder(javax.swing.BorderFactory.createTitledBorder("Constraint Editor"));
        panelDCEditor.setLayout(new java.awt.GridBagLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("New constraint:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelDCEditor.add(jLabel1, gridBagConstraints);

        jScrollPane4.setMinimumSize(new java.awt.Dimension(19, 20));

        fieldDenialConstraint.setColumns(20);
        fieldDenialConstraint.setRows(3);
        jScrollPane4.setViewportView(fieldDenialConstraint);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        panelDCEditor.add(jScrollPane4, gridBagConstraints);

        buttonAddDenialConstraint.setText("Add");
        buttonAddDenialConstraint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddDenialConstraintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelDCEditor.add(buttonAddDenialConstraint, gridBagConstraints);

        buttonDenailLogicalImplication.setText("Check Logical Implication");
        buttonDenailLogicalImplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDenailLogicalImplicationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelDCEditor.add(buttonDenailLogicalImplication, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panelDCEditor.add(jPanel1, gridBagConstraints);

        panelDenialConstraints.add(panelDCEditor, java.awt.BorderLayout.NORTH);

        panelDCTree.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Constraints"));
        panelDCTree.setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        buttonDeleteDenialConstraint.setFocusable(false);
        buttonDeleteDenialConstraint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDeleteDenialConstraint.setLabel("Delete");
        buttonDeleteDenialConstraint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonDeleteDenialConstraint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteDenialConstraintActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonDeleteDenialConstraint);

        panelDCTree.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        treeDenialConstraints.setFont(new java.awt.Font("Courier", 0, 14));
        jScrollPane1.setViewportView(treeDenialConstraints);

        panelDCTree.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelDenialConstraints.add(panelDCTree, java.awt.BorderLayout.CENTER);

        constraintsTabbedPane.addTab("Denial Constraints", panelDenialConstraints);

        panelEQLConstraints.setLayout(new java.awt.BorderLayout());

        panelEQLCEditor.setBorder(javax.swing.BorderFactory.createTitledBorder("Constraint Editor"));
        panelEQLCEditor.setLayout(new java.awt.GridBagLayout());

        labelNewEQLC.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelNewEQLC.setText("New constraint:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelEQLCEditor.add(labelNewEQLC, gridBagConstraints);

        jScrollPane6.setPreferredSize(new java.awt.Dimension(244, 84));

        fieldEQLConstraint.setColumns(20);
        fieldEQLConstraint.setRows(3);
        jScrollPane6.setViewportView(fieldEQLConstraint);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        panelEQLCEditor.add(jScrollPane6, gridBagConstraints);

        buttonAddEQLCosntraint.setText("Add");
        buttonAddEQLCosntraint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddEQLCosntraintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelEQLCEditor.add(buttonAddEQLCosntraint, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panelEQLCEditor.add(jPanel3, gridBagConstraints);

        panelEQLConstraints.add(panelEQLCEditor, java.awt.BorderLayout.NORTH);

        panelEQLCTree.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Constraints"));
        panelEQLCTree.setLayout(new java.awt.BorderLayout());

        jToolBar3.setFloatable(false);
        jToolBar3.setRollover(true);

        buttonDeleteEQLConstraint.setFocusable(false);
        buttonDeleteEQLConstraint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDeleteEQLConstraint.setLabel("Delete");
        buttonDeleteEQLConstraint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonDeleteEQLConstraint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteEQLConstraintActionPerformed(evt);
            }
        });
        jToolBar3.add(buttonDeleteEQLConstraint);

        panelEQLCTree.add(jToolBar3, java.awt.BorderLayout.PAGE_START);

        treeEQLConstraints.setFont(new java.awt.Font("Courier", 0, 14));
        jScrollPane3.setViewportView(treeEQLConstraints);

        panelEQLCTree.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        panelEQLConstraints.add(panelEQLCTree, java.awt.BorderLayout.CENTER);

        constraintsTabbedPane.addTab("EQL Constraints", panelEQLConstraints);

        add(constraintsTabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

	private void buttonDenailLogicalImplicationActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonDenailLogicalImplicationActionPerformed
		DenialConstraint constraint = new DenialConstraint(fieldDenialConstraint.getText().trim(), "");
		
		try {
			actionCheckDCImpAction.setConstraint(constraint);
			boolean implied = actionCheckDCImpAction.checkLogicalImplication();
			if (implied) {
				JOptionPane.showMessageDialog(null, "The constraint IS implied by the ontology");
			} else {
				JOptionPane.showMessageDialog(null, "The constraint IS NOT implied by the ontology");
			}
				
		} catch (Exception e) {
			TextMessageDialog dialog = new TextMessageDialog(null, true);
			dialog.setText(e);
			dialog.setVisible(true);
		}
	}// GEN-LAST:event_buttonDenailLogicalImplicationActionPerformed

	private void buttonIDLogicalImplicationActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonIDLogicalImplicationActionPerformed
		IDConstraint constraint = new IDConstraint(fieldIDConstraint.getText().trim(), "");
		
		try {
			actionCheckIDCImpAction.setConstraint(constraint);
			boolean implied = actionCheckIDCImpAction.checkLogicalImplication();
			if (implied) {
				JOptionPane.showMessageDialog(null, "The constraint IS implied by the ontology");
			} else {
				JOptionPane.showMessageDialog(null, "The constraint IS NOT implied by the ontology");
			}
				
		} catch (Exception e) {
			TextMessageDialog dialog = new TextMessageDialog(null, true);
			dialog.setText(e);
			dialog.setVisible(true);
		}
	}// GEN-LAST:event_buttonIDLogicalImplicationActionPerformed

	private void fieldIDConstraintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_fieldIDConstraintActionPerformed
		buttonAddIDConstraintActionPerformed(evt);
	}// GEN-LAST:event_fieldIDConstraintActionPerformed

	private void fieldDenialConstraintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_fieldDenialConstraintActionPerformed
		buttonAddDenialConstraintActionPerformed(evt);
	}// GEN-LAST:event_fieldDenialConstraintActionPerformed

	private void fieldEQLConstraintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_fieldEQLConstraintActionPerformed
		buttonAddEQLCosntraintActionPerformed(evt);
	}// GEN-LAST:event_fieldEQLConstraintActionPerformed

	private void buttonAddIDConstraintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonAddIDConstraintActionPerformed
		IDConstraint dc = new IDConstraint(fieldIDConstraint.getText(), "");
		idController.addAssertion(dc);
	}// GEN-LAST:event_buttonAddIDConstraintActionPerformed

	private void buttonAddDenialConstraintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonAddDenialConstraintActionPerformed
		DenialConstraint dc = new DenialConstraint(fieldDenialConstraint.getText(), "");
		dcController.addAssertion(dc);
	}// GEN-LAST:event_buttonAddDenialConstraintActionPerformed

	private void buttonAddEQLCosntraintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonAddEQLCosntraintActionPerformed
		EQLConstraint dc = new EQLConstraint(fieldEQLConstraint.getText(), "");
		eqlController.addAssertion(dc);
	}// GEN-LAST:event_buttonAddEQLCosntraintActionPerformed

	private void buttonDeleteIDConstraintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonDeleteIDConstraintActionPerformed
		TreePath[] paths = treeIDConstraints.getSelectionPaths();
		for (TreePath treePath : paths) {
			TreeNode node = (TreeNode) treePath.getLastPathComponent();
			if (node instanceof AssertionTreeNode) {
				AssertionTreeNode assNode = (AssertionTreeNode<Assertion>) node;
				IDConstraint assertion = (IDConstraint) assNode.getUserObject();
				idController.removeAssertion(assertion);
			}
		}
	}// GEN-LAST:event_buttonDeleteIDConstraintActionPerformed

	private void buttonDeleteDenialConstraintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonDeleteDenialConstraintActionPerformed
		TreePath[] paths = treeDenialConstraints.getSelectionPaths();
		for (TreePath treePath : paths) {
			TreeNode node = (TreeNode) treePath.getLastPathComponent();
			if (node instanceof AssertionTreeNode) {
				AssertionTreeNode assNode = (AssertionTreeNode<Assertion>) node;
				DenialConstraint assertion = (DenialConstraint) assNode.getUserObject();
				dcController.removeAssertion(assertion);
			}
		}
	}// GEN-LAST:event_buttonDeleteDenialConstraintActionPerformed

	private void buttonDeleteEQLConstraintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonDeleteEQLConstraintActionPerformed
		TreePath[] paths = treeEQLConstraints.getSelectionPaths();
		for (TreePath treePath : paths) {
			TreeNode node = (TreeNode) treePath.getLastPathComponent();
			if (node instanceof AssertionTreeNode) {
				AssertionTreeNode assNode = (AssertionTreeNode<Assertion>) node;
				EQLConstraint assertion = (EQLConstraint) assNode.getUserObject();
				eqlController.removeAssertion(assertion);
			}
		}
	}// GEN-LAST:event_buttonDeleteEQLConstraintActionPerformed

	public void setCheckDenialConstraintImplicaitonAction(CheckDenialConstraintLogicalImplicationAction action) {
		this.actionCheckDCImpAction = action;
	}
	
	public void setCheckIDConstraintImplicaitonAction(CheckIDConstraintLogicalImplicationAction action) {
		this.actionCheckIDCImpAction = action;
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddDenialConstraint;
    private javax.swing.JButton buttonAddEQLCosntraint;
    private javax.swing.JButton buttonAddIDConstraint;
    private javax.swing.JButton buttonDeleteDenialConstraint;
    private javax.swing.JButton buttonDeleteEQLConstraint;
    private javax.swing.JButton buttonDeleteIDConstraint;
    private javax.swing.JButton buttonDenailLogicalImplication;
    private javax.swing.JButton buttonIDLogicalImplication;
    private javax.swing.JTabbedPane constraintsTabbedPane;
    private javax.swing.JTextArea fieldDenialConstraint;
    private javax.swing.JTextArea fieldEQLConstraint;
    private javax.swing.JTextArea fieldIDConstraint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JLabel labelNewEQLC;
    private javax.swing.JPanel panelDCEditor;
    private javax.swing.JPanel panelDCTree;
    private javax.swing.JPanel panelDenialConstraints;
    private javax.swing.JPanel panelEQLCEditor;
    private javax.swing.JPanel panelEQLCTree;
    private javax.swing.JPanel panelEQLConstraints;
    private javax.swing.JPanel panelIDCEditor;
    private javax.swing.JPanel panelIDCTree;
    private javax.swing.JPanel panelIDConstraints;
    private javax.swing.JTree treeDenialConstraints;
    private javax.swing.JTree treeEQLConstraints;
    private javax.swing.JTree treeIDConstraints;
    // End of variables declaration//GEN-END:variables

}
