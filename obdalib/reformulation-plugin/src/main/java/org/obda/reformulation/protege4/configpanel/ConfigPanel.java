/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConfigPanel.java
 *
 * Created on 9-set-2010, 14.16.20
 */

package org.obda.reformulation.protege4.configpanel;

import inf.unibz.it.obda.owlapi.ReformulationPlatformPreferences;

/**
 *
 * @author obda
 */
public class ConfigPanel extends javax.swing.JPanel {

	private ReformulationPlatformPreferences preference = null;
	
    /** 
	 * The constructor.
     */
    public ConfigPanel(ReformulationPlatformPreferences preference) {
    	this.preference = preference;
        initComponents();
        applyPreferences();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        abox = new javax.swing.ButtonGroup();
        mapping = new javax.swing.ButtonGroup();
        DB = new javax.swing.ButtonGroup();
        mapper = new javax.swing.ButtonGroup();
        pnlTWOption = new javax.swing.JPanel();
        lblTechniqueWrapper = new javax.swing.JLabel();
        cmbTechniqueWrapper = new javax.swing.JComboBox();
        pnlTWConfiguration = new javax.swing.JPanel();
        pnlReformulationMethods = new javax.swing.JPanel();
        lblReformulationTechnique = new javax.swing.JLabel();
        cmbReformulationMethods = new javax.swing.JComboBox();
        pnlABoxConfiguration = new javax.swing.JPanel();
        pnlMappingOptions = new javax.swing.JPanel();
        optDirectMapping = new javax.swing.JRadioButton();
        optSimpleMethod = new javax.swing.JRadioButton();
        optHierarchicalMethod = new javax.swing.JRadioButton();
        optComplexMapping = new javax.swing.JRadioButton();
        pnlABoxSourceOptions = new javax.swing.JPanel();
        optReadFromOwlFile = new javax.swing.JRadioButton();
        optUseInMemoryDB = new javax.swing.JRadioButton();
        optUseRemoteDB = new javax.swing.JRadioButton();
        optReadFromDB = new javax.swing.JRadioButton();

        setMinimumSize(new java.awt.Dimension(525, 450));
        setPreferredSize(new java.awt.Dimension(525, 450));
        setLayout(new java.awt.BorderLayout(0, 15));

        pnlTWOption.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Technique Wrapper Options"));
        pnlTWOption.setMinimumSize(new java.awt.Dimension(590, 80));
        pnlTWOption.setPreferredSize(new java.awt.Dimension(590, 100));
        pnlTWOption.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 25));

        lblTechniqueWrapper.setText("Technique Wrapper:");
        lblTechniqueWrapper.setMinimumSize(new java.awt.Dimension(170, 30));
        lblTechniqueWrapper.setPreferredSize(new java.awt.Dimension(140, 20));
        pnlTWOption.add(lblTechniqueWrapper);

        cmbTechniqueWrapper.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bolzano Reformulation Technique" }));
        cmbTechniqueWrapper.setMaximumSize(new java.awt.Dimension(180, 32767));
        cmbTechniqueWrapper.setMinimumSize(new java.awt.Dimension(125, 18));
        cmbTechniqueWrapper.setPreferredSize(new java.awt.Dimension(280, 20));
        cmbTechniqueWrapper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTechniqueWrapperActionPerformed(evt);
            }
        });
        pnlTWOption.add(cmbTechniqueWrapper);

        add(pnlTWOption, java.awt.BorderLayout.NORTH);
        pnlTWOption.getAccessibleContext().setAccessibleName("Bolzano Reformulation Technique");

        pnlTWConfiguration.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Technique Wrapper Configuration"));
        pnlTWConfiguration.setMinimumSize(new java.awt.Dimension(500, 350));
        pnlTWConfiguration.setPreferredSize(new java.awt.Dimension(600, 350));
        pnlTWConfiguration.setLayout(new java.awt.GridBagLayout());

        pnlReformulationMethods.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Reformulation Methods\n"));
        pnlReformulationMethods.setMinimumSize(new java.awt.Dimension(590, 100));
        pnlReformulationMethods.setPreferredSize(new java.awt.Dimension(590, 100));
        pnlReformulationMethods.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 25));

        lblReformulationTechnique.setText("Reformulation Technique: ");
        lblReformulationTechnique.setMinimumSize(new java.awt.Dimension(150, 30));
        lblReformulationTechnique.setPreferredSize(new java.awt.Dimension(180, 20));
        pnlReformulationMethods.add(lblReformulationTechnique);

        cmbReformulationMethods.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dlr", "improved" }));
        cmbReformulationMethods.setSelectedIndex(1);
        cmbReformulationMethods.setPreferredSize(new java.awt.Dimension(220, 20));
        cmbReformulationMethods.setRenderer(new ReformulationMethodsCellRenderer());
        cmbReformulationMethods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbReformulationMethodsActionPerformed(evt);
            }
        });
        pnlReformulationMethods.add(cmbReformulationMethods);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 144;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 6, 0, 6);
        pnlTWConfiguration.add(pnlReformulationMethods, gridBagConstraints);

        pnlABoxConfiguration.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "ABox Configuration"));
        pnlABoxConfiguration.setMinimumSize(new java.awt.Dimension(590, 200));
        pnlABoxConfiguration.setPreferredSize(new java.awt.Dimension(590, 180));
        pnlABoxConfiguration.setLayout(new java.awt.BorderLayout());

        pnlMappingOptions.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        pnlMappingOptions.setMinimumSize(new java.awt.Dimension(215, 50));
        pnlMappingOptions.setPreferredSize(new java.awt.Dimension(215, 50));
        pnlMappingOptions.setLayout(new java.awt.GridBagLayout());

        mapping.add(optDirectMapping);
        optDirectMapping.setText("Direct Mapping");
        optDirectMapping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optDirectMappingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 18, 0, 18);
        pnlMappingOptions.add(optDirectMapping, gridBagConstraints);

        mapper.add(optSimpleMethod);
        optSimpleMethod.setSelected(true);
        optSimpleMethod.setText("Simple Method");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 48, 0, 18);
        pnlMappingOptions.add(optSimpleMethod, gridBagConstraints);

        mapper.add(optHierarchicalMethod);
        optHierarchicalMethod.setText("Hierarchical Method");
        optHierarchicalMethod.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 48, 0, 18);
        pnlMappingOptions.add(optHierarchicalMethod, gridBagConstraints);

        mapping.add(optComplexMapping);
        optComplexMapping.setSelected(true);
        optComplexMapping.setText("Complex Mapping");
        optComplexMapping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optComplexMappingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 18, 0, 18);
        pnlMappingOptions.add(optComplexMapping, gridBagConstraints);

        pnlABoxConfiguration.add(pnlMappingOptions, java.awt.BorderLayout.WEST);

        pnlABoxSourceOptions.setMinimumSize(new java.awt.Dimension(290, 80));
        pnlABoxSourceOptions.setPreferredSize(new java.awt.Dimension(290, 100));
        pnlABoxSourceOptions.setLayout(new java.awt.GridBagLayout());

        abox.add(optReadFromOwlFile);
        optReadFromOwlFile.setText("Read ABox from the OWL file");
        optReadFromOwlFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optReadFromOwlFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 100, 0, 18);
        pnlABoxSourceOptions.add(optReadFromOwlFile, gridBagConstraints);

        DB.add(optUseInMemoryDB);
        optUseInMemoryDB.setSelected(true);
        optUseInMemoryDB.setText("use in-memory database");
        optUseInMemoryDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optUseInMemoryDBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 130, 0, 18);
        pnlABoxSourceOptions.add(optUseInMemoryDB, gridBagConstraints);

        DB.add(optUseRemoteDB);
        optUseRemoteDB.setText("use remote database");
        optUseRemoteDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optUseRemoteDBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 130, 0, 18);
        pnlABoxSourceOptions.add(optUseRemoteDB, gridBagConstraints);

        abox.add(optReadFromDB);
        optReadFromDB.setSelected(true);
        optReadFromDB.setText("ABox is already stored in the database");
        optReadFromDB.setMaximumSize(new java.awt.Dimension(300, 23));
        optReadFromDB.setMinimumSize(new java.awt.Dimension(350, 23));
        optReadFromDB.setPreferredSize(new java.awt.Dimension(310, 23));
        optReadFromDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optReadFromDBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 100, 0, 18);
        pnlABoxSourceOptions.add(optReadFromDB, gridBagConstraints);

        pnlABoxConfiguration.add(pnlABoxSourceOptions, java.awt.BorderLayout.EAST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 135;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 6, 7, 6);
        pnlTWConfiguration.add(pnlABoxConfiguration, gridBagConstraints);

        add(pnlTWConfiguration, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void applyPreferences() {
    	
    	String method = (String) preference.getCurrentValue(
    			ReformulationPlatformPreferences.REFORMULATION_TECHNIQUE);
    	
    	cmbReformulationMethods.setSelectedItem(method);
    	
    	String value = (String) preference.getCurrentValue(
    			ReformulationPlatformPreferences.UNFOLDING_MECHANMISM);
    	
    	if (value.equals("direct")) {
    		optDirectMapping.setSelected(true);
    	}
    	else if (value.equals("complex")) {
    		optComplexMapping.setSelected(true);
    		optSimpleMethod.setEnabled(false);
    	}
    	
    	boolean useInMemoryDB = preference.getCurrentBooleanValueFor(
    			ReformulationPlatformPreferences.USE_INMEMORY_DB);
    	
    	if (useInMemoryDB) {
    		optReadFromOwlFile.setSelected(true);
    		optUseInMemoryDB.setSelected(true);
    	}
    	else {
    		optReadFromDB.setSelected(true);
    		optUseInMemoryDB.setEnabled(false);
    		optUseRemoteDB.setEnabled(false);
    	}
    }
    
    private void cmbTechniqueWrapperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTechniqueWrapperActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTechniqueWrapperActionPerformed
    
    private void cmbReformulationMethodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbReformulationMethodsActionPerformed
        javax.swing.JComboBox cb = (javax.swing.JComboBox) evt.getSource();
        String optValue = (String) cb.getSelectedItem();
        preference.setCurrentValueOf(
        		ReformulationPlatformPreferences.REFORMULATION_TECHNIQUE, optValue);
    }//GEN-LAST:event_cmbReformulationMethodsActionPerformed
    
    private void optDirectMappingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optDirectMappingActionPerformed
    	preference.setCurrentValueOf(
                ReformulationPlatformPreferences.UNFOLDING_MECHANMISM, "direct");
    	optSimpleMethod.setEnabled(true);
    	optSimpleMethod.setSelected(true);
    	optSimpleMethod.doClick();
    }//GEN-LAST:event_optDirectMappingActionPerformed

    private void optComplexMappingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optComplexMappingActionPerformed
        preference.setCurrentValueOf(
                ReformulationPlatformPreferences.UNFOLDING_MECHANMISM, "complex");
        optSimpleMethod.setEnabled(false);
    }//GEN-LAST:event_optComplexMappingActionPerformed
    
    private void optReadFromOwlFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optReadFromOwlFileActionPerformed
        optUseInMemoryDB.setEnabled(true);
        optUseRemoteDB.setEnabled(true);
        optUseInMemoryDB.setSelected(true);
        optUseInMemoryDB.doClick();
    }//GEN-LAST:event_optReadFromOwlFileActionPerformed

    private void optUseInMemoryDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optUseInMemoryDBActionPerformed
        preference.setCurrentValueOf(
                ReformulationPlatformPreferences.USE_INMEMORY_DB, "true");
    }//GEN-LAST:event_optUseInMemoryDBActionPerformed
    
    private void optUseRemoteDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optUseRemoteDBActionPerformed
        preference.setCurrentValueOf(
                ReformulationPlatformPreferences.USE_INMEMORY_DB, "false");
    }//GEN-LAST:event_optUseRemoteDBActionPerformed
   
    private void optReadFromDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optReadFromDBActionPerformed
        preference.setCurrentValueOf(
                ReformulationPlatformPreferences.USE_INMEMORY_DB, "false");
        optUseInMemoryDB.setEnabled(false);
        optUseRemoteDB.setEnabled(false);
    }//GEN-LAST:event_optReadFromDBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup DB;
    private javax.swing.ButtonGroup abox;
    private javax.swing.JComboBox cmbReformulationMethods;
    private javax.swing.JComboBox cmbTechniqueWrapper;
    private javax.swing.JLabel lblReformulationTechnique;
    private javax.swing.JLabel lblTechniqueWrapper;
    private javax.swing.ButtonGroup mapper;
    private javax.swing.ButtonGroup mapping;
    private javax.swing.JRadioButton optComplexMapping;
    private javax.swing.JRadioButton optDirectMapping;
    private javax.swing.JRadioButton optHierarchicalMethod;
    private javax.swing.JRadioButton optReadFromDB;
    private javax.swing.JRadioButton optReadFromOwlFile;
    private javax.swing.JRadioButton optSimpleMethod;
    private javax.swing.JRadioButton optUseInMemoryDB;
    private javax.swing.JRadioButton optUseRemoteDB;
    private javax.swing.JPanel pnlABoxConfiguration;
    private javax.swing.JPanel pnlABoxSourceOptions;
    private javax.swing.JPanel pnlMappingOptions;
    private javax.swing.JPanel pnlReformulationMethods;
    private javax.swing.JPanel pnlTWConfiguration;
    private javax.swing.JPanel pnlTWOption;
    // End of variables declaration//GEN-END:variables

}
