package it.unibz.krdb.obda.protege4.panels;

import it.unibz.krdb.obda.exception.DuplicateMappingException;
import it.unibz.krdb.obda.gui.swing.treemodel.IncrementalResultSetTableModel;
import it.unibz.krdb.obda.gui.swing.utils.DatasourceSelectorListener;
import it.unibz.krdb.obda.gui.swing.utils.DialogUtils;
import it.unibz.krdb.obda.gui.swing.utils.OBDAProgessMonitor;
import it.unibz.krdb.obda.gui.swing.utils.OBDAProgressListener;
import it.unibz.krdb.obda.io.PrefixManager;
import it.unibz.krdb.obda.model.Atom;
import it.unibz.krdb.obda.model.CQIE;
import it.unibz.krdb.obda.model.Function;
import it.unibz.krdb.obda.model.OBDADataFactory;
import it.unibz.krdb.obda.model.OBDADataSource;
import it.unibz.krdb.obda.model.OBDALibConstants;
import it.unibz.krdb.obda.model.OBDAMappingAxiom;
import it.unibz.krdb.obda.model.OBDAModel;
import it.unibz.krdb.obda.model.OBDAQuery;
import it.unibz.krdb.obda.model.Predicate;
import it.unibz.krdb.obda.model.Term;
import it.unibz.krdb.obda.model.ValueConstant;
import it.unibz.krdb.obda.model.Variable;
import it.unibz.krdb.obda.model.impl.OBDADataFactoryImpl;
import it.unibz.krdb.obda.model.impl.RDBMSourceParameterConstants;
import it.unibz.krdb.obda.owlrefplatform.core.queryevaluation.SQLAdapterFactory;
import it.unibz.krdb.obda.owlrefplatform.core.queryevaluation.SQLDialectAdapter;
import it.unibz.krdb.obda.protege4.gui.IconLoader;
import it.unibz.krdb.obda.protege4.gui.component.AutoSuggestComboBox;
import it.unibz.krdb.obda.protege4.gui.component.MapItem;
import it.unibz.krdb.obda.protege4.gui.component.PredicateItem;
import it.unibz.krdb.obda.protege4.gui.component.PropertyMappingPanel;
import it.unibz.krdb.obda.protege4.gui.component.SQLResultTable;
import it.unibz.krdb.sql.DBMetadata;
import it.unibz.krdb.sql.DataDefinition;
import it.unibz.krdb.sql.JDBCConnectionManager;
import it.unibz.krdb.sql.TableDefinition;
import it.unibz.krdb.sql.ViewDefinition;
import it.unibz.krdb.sql.api.Attribute;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.CountDownLatch;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class MappingAssistantPanel extends javax.swing.JPanel implements DatasourceSelectorListener {

	private static final long serialVersionUID = 1L;

	private OBDAModel obdaModel;
	
	private PrefixManager prefixManager;
	
	private OBDADataSource selectedSource;
	
	private MapItem predicateSubjectMap = new MapItem();

	private static OBDADataFactory dfac = OBDADataFactoryImpl.getInstance();

	public MappingAssistantPanel(OBDAModel model) {
		obdaModel = model;
		prefixManager = obdaModel.getPrefixManager();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splMainSplitter = new javax.swing.JSplitPane();
        pnlDataBrowser = new javax.swing.JPanel();
        splSqlQuery = new javax.swing.JSplitPane();
        pnlEditor = new javax.swing.JPanel();
        pnlDataSet = new javax.swing.JPanel();
        lblDataSet = new javax.swing.JLabel();
        cboDataSet = new javax.swing.JComboBox();
        cmdExecute = new javax.swing.JButton();
        pnlQueryEditor = new javax.swing.JPanel();
        scrQueryEditor = new javax.swing.JScrollPane();
        txtQueryEditor = new javax.swing.JEditorPane();
        pnlResultFilter = new javax.swing.JPanel();
        lblShow = new javax.swing.JLabel();
        txtRowCount = new javax.swing.JTextField();
        lblRows = new javax.swing.JLabel();
        pnlResult = new javax.swing.JPanel();
        scrQueryResult = new javax.swing.JScrollPane();
        pnlOntologyBrowser = new javax.swing.JPanel();
        pnlConcept = new javax.swing.JPanel();
        lblClass = new javax.swing.JLabel();
        pnlClassMap = new javax.swing.JPanel();
        pnlClassSearch = new javax.swing.JPanel();
        pnlClassSeachComboBox = new javax.swing.JPanel();
        lblClassIcon = new javax.swing.JLabel();
        pnlClassUriTemplate = new javax.swing.JPanel();
        txtClassUriTemplate = new javax.swing.JTextField();
        lblMapIcon = new javax.swing.JLabel();
        pnlProperties = new javax.swing.JPanel();
        pnlPropertiesLabel = new javax.swing.JPanel();
        lblProperties = new javax.swing.JLabel();
        pnlPropertyList = new javax.swing.JPanel();
        pnlCommandButtons = new javax.swing.JPanel();
        cmdClearAll = new javax.swing.JButton();
        cmdCreateMapping = new javax.swing.JButton();

        setAlignmentX(5.0F);
        setAlignmentY(5.0F);
        setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        setName("panel_master");
        setPreferredSize(new java.awt.Dimension(640, 480));
        setLayout(new java.awt.BorderLayout());

        splMainSplitter.setDividerLocation(0.75);
        splMainSplitter.setResizeWeight(0.75);

        pnlDataBrowser.setName("panel_databrowser");
        pnlDataBrowser.setLayout(new java.awt.BorderLayout());

        splSqlQuery.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        splSqlQuery.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splSqlQuery.setResizeWeight(0.25);
        splSqlQuery.setMinimumSize(new java.awt.Dimension(550, 400));
        splSqlQuery.setPreferredSize(new java.awt.Dimension(550, 400));

        pnlEditor.setMinimumSize(new java.awt.Dimension(156, 100));
        pnlEditor.setPreferredSize(new java.awt.Dimension(156, 100));
        pnlEditor.setLayout(new java.awt.BorderLayout());

        pnlDataSet.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblDataSet.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDataSet.setForeground(new java.awt.Color(53, 113, 163));
        lblDataSet.setText("Data Set:");
        pnlDataSet.add(lblDataSet);

        cboDataSet.setMinimumSize(new java.awt.Dimension(23, 23));
        cboDataSet.setPreferredSize(new java.awt.Dimension(240, 23));
        cboDataSet.setRenderer(new DataSetItemRenderer());
        cboDataSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDataSetActionPerformed(evt);
            }
        });
        pnlDataSet.add(cboDataSet);

        cmdExecute.setToolTipText("Execute query");
        cmdExecute.setIcon(IconLoader.getImageIcon("images/execute.png"));
        cmdExecute.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cmdExecute.setContentAreaFilled(false);
        cmdExecute.setPreferredSize(new java.awt.Dimension(25, 25));
        cmdExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExecuteActionPerformed(evt);
            }
        });
        pnlDataSet.add(cmdExecute);

        pnlEditor.add(pnlDataSet, java.awt.BorderLayout.PAGE_START);

        pnlQueryEditor.setLayout(new java.awt.BorderLayout());

        txtQueryEditor.setBorder(null);
        txtQueryEditor.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txtQueryEditor.setMinimumSize(new java.awt.Dimension(100, 20));
        txtQueryEditor.setPreferredSize(new java.awt.Dimension(100, 20));
        scrQueryEditor.setViewportView(txtQueryEditor);

        pnlQueryEditor.add(scrQueryEditor, java.awt.BorderLayout.CENTER);

        pnlEditor.add(pnlQueryEditor, java.awt.BorderLayout.CENTER);

        pnlResultFilter.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblShow.setText("Show");
        pnlResultFilter.add(lblShow);

        txtRowCount.setText("20");
        txtRowCount.setToolTipText("Insert the limit for data preview or 0 to present all data");
        txtRowCount.setMinimumSize(new java.awt.Dimension(25, 18));
        txtRowCount.setPreferredSize(new java.awt.Dimension(25, 18));
        txtRowCount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRowCountFocusLost(evt);
            }
        });
        txtRowCount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRowCountKeyPressed(evt);
            }
        });
        pnlResultFilter.add(txtRowCount);

        lblRows.setText("rows");
        pnlResultFilter.add(lblRows);

        pnlEditor.add(pnlResultFilter, java.awt.BorderLayout.PAGE_END);

        splSqlQuery.setLeftComponent(pnlEditor);

        pnlResult.setLayout(new java.awt.BorderLayout());

        tblQueryResult = new SQLResultTable();
        tblQueryResult.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        scrQueryResult.setViewportView(tblQueryResult);
        scrQueryResult.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pnlResult.add(scrQueryResult, java.awt.BorderLayout.CENTER);

        splSqlQuery.setRightComponent(pnlResult);

        pnlDataBrowser.add(splSqlQuery, java.awt.BorderLayout.CENTER);

        splMainSplitter.setLeftComponent(pnlDataBrowser);

        pnlOntologyBrowser.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 3, 0, 3));
        pnlOntologyBrowser.setName("panel_ontologybrowser");
        pnlOntologyBrowser.setLayout(new java.awt.BorderLayout(0, 2));

        pnlConcept.setLayout(new java.awt.BorderLayout(0, 2));

        lblClass.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblClass.setForeground(new java.awt.Color(53, 113, 163));
        lblClass.setText("Mapping for class:");
        lblClass.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        lblClass.setOpaque(true);
        pnlConcept.add(lblClass, java.awt.BorderLayout.NORTH);

        pnlClassMap.setBackground(new Color(240, 245, 240));
        pnlClassMap.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(192, 192, 192)), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4)));
        pnlClassMap.setLayout(new java.awt.BorderLayout());

        pnlClassSearch.setOpaque(false);
        pnlClassSearch.setRequestFocusEnabled(false);
        pnlClassSearch.setLayout(new java.awt.BorderLayout(7, 0));

        pnlClassSeachComboBox.setLayout(new java.awt.BorderLayout());
        Vector<Object> v = new Vector<Object>();
        for (Predicate pred : obdaModel.getDeclaredClasses()) {
            v.addElement(new PredicateItem(pred, prefixManager));
        }
        cboClassAutoSuggest = new AutoSuggestComboBox(v);
        cboClassAutoSuggest.setMinimumSize(new java.awt.Dimension(195, 23));
        cboClassAutoSuggest.setPreferredSize(new java.awt.Dimension(195, 23));
        cboClassAutoSuggest.addItemListener(new java.awt.event.ItemListener () {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboClassAutoSuggestItemStateChanged(evt);
            }
        });
        pnlClassSeachComboBox.add(cboClassAutoSuggest, java.awt.BorderLayout.CENTER);
        pnlClassSearch.add(pnlClassSeachComboBox, java.awt.BorderLayout.CENTER);

        lblClassIcon.setIcon(IconLoader.getImageIcon("images/class_primitive.png"));
        pnlClassSearch.add(lblClassIcon, java.awt.BorderLayout.WEST);

        pnlClassMap.add(pnlClassSearch, java.awt.BorderLayout.NORTH);

        pnlClassUriTemplate.setOpaque(false);
        pnlClassUriTemplate.setLayout(new java.awt.BorderLayout(6, 0));

        txtClassUriTemplate.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtClassUriTemplate.setText(getDefaultNamespace(true));
        txtClassUriTemplate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        txtClassUriTemplate.setMinimumSize(new java.awt.Dimension(240, 23));
        txtClassUriTemplate.setPreferredSize(new java.awt.Dimension(240, 23));
        txtClassUriTemplate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtClassUriTemplateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtClassUriTemplateFocusLost(evt);
            }
        });
        txtClassUriTemplate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtClassUriTemplateKeyPressed(evt);
            }
        });
        pnlClassUriTemplate.add(txtClassUriTemplate, java.awt.BorderLayout.CENTER);

        lblMapIcon.setIcon(IconLoader.getImageIcon("images/link.png"));
        pnlClassUriTemplate.add(lblMapIcon, java.awt.BorderLayout.LINE_START);

        pnlClassMap.add(pnlClassUriTemplate, java.awt.BorderLayout.SOUTH);

        pnlConcept.add(pnlClassMap, java.awt.BorderLayout.CENTER);

        pnlOntologyBrowser.add(pnlConcept, java.awt.BorderLayout.NORTH);

        pnlProperties.setLayout(new java.awt.BorderLayout(0, 3));

        pnlPropertiesLabel.setMinimumSize(new java.awt.Dimension(63, 30));
        pnlPropertiesLabel.setLayout(new java.awt.BorderLayout());

        lblProperties.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblProperties.setForeground(new java.awt.Color(53, 113, 163));
        lblProperties.setText("Add new property mapping:");
        lblProperties.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        lblProperties.setOpaque(true);
        lblProperties.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pnlPropertiesLabel.add(lblProperties, java.awt.BorderLayout.CENTER);

        pnlProperties.add(pnlPropertiesLabel, java.awt.BorderLayout.NORTH);

        pnlPropertyList.setLayout(new java.awt.BorderLayout());

        pnlPropertyEditorList = new PropertyMappingPanel(obdaModel);
        pnlPropertyList.add(pnlPropertyEditorList);

        pnlProperties.add(pnlPropertyList, java.awt.BorderLayout.CENTER);

        pnlOntologyBrowser.add(pnlProperties, java.awt.BorderLayout.CENTER);

        pnlCommandButtons.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 0, 0));
        pnlCommandButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        cmdClearAll.setText("Clear All");
        cmdClearAll.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cmdClearAll.setContentAreaFilled(false);
        cmdClearAll.setPreferredSize(new java.awt.Dimension(70, 25));
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });
        pnlCommandButtons.add(cmdClearAll);

        cmdCreateMapping.setText("Create Mapping");
        cmdCreateMapping.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cmdCreateMapping.setContentAreaFilled(false);
        cmdCreateMapping.setPreferredSize(new java.awt.Dimension(100, 25));
        cmdCreateMapping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCreateMappingActionPerformed(evt);
            }
        });
        pnlCommandButtons.add(cmdCreateMapping);

        pnlOntologyBrowser.add(pnlCommandButtons, java.awt.BorderLayout.SOUTH);

        splMainSplitter.setRightComponent(pnlOntologyBrowser);

        add(splMainSplitter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

	private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdClearAllActionPerformed
		clearForm();
	}// GEN-LAST:event_cmdClearAllActionPerformed

	private void txtRowCountFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtRowCountFocusLost
		if (selectedSource != null && !txtQueryEditor.getText().isEmpty()) {
			executeQuery();
		}
	}// GEN-LAST:event_txtRowCountFocusLost

    private void txtRowCountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRowCountKeyPressed
    	int code = evt.getKeyCode();
		if (code == KeyEvent.VK_ENTER) {
			txtRowCount.transferFocus();
		}
    }//GEN-LAST:event_txtRowCountKeyPressed

	private void txtClassUriTemplateFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtClassUriTemplateFocusGained
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				txtClassUriTemplate.setCaretPosition(txtClassUriTemplate.getText().length());
			}
		});
	}// GEN-LAST:event_txtClassUriTemplateFocusGained

	private void cmdCreateMappingActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmdCreateMappingActionPerformed
		// Stop any editing action and save whatever in the text field
		if (pnlPropertyEditorList.isEditing()) {
			pnlPropertyEditorList.stopCellEditing();
		}

		// Prepare the mapping source
		String source = txtQueryEditor.getText();
		
		// Prepare the mapping target
		List<MapItem> predicateObjectMapsList = pnlPropertyEditorList.getPredicateObjectMapsList();
		OBDAQuery target = prepareTargetQuery(predicateSubjectMap, predicateObjectMapsList);
		
		// Create the mapping axiom
		OBDAMappingAxiom mappingAxiom = dfac.getRDBMSMappingAxiom(source, target);
		try {
			obdaModel.addMapping(selectedSource.getSourceID(), mappingAxiom);
			clearForm();
		} catch (DuplicateMappingException e) {
			DialogUtils.showQuickErrorDialog(null, e, "Duplicate mapping identification: " + mappingAxiom.getId());
			return;
		} catch (NullPointerException e) {
			DialogUtils.showQuickErrorDialog(null, new Exception("Data source has not been defined."));
			return;
		}
	}// GEN-LAST:event_cmdCreateMappingActionPerformed

	private CQIE prepareTargetQuery(MapItem predicateSubjectMap, List<MapItem> predicateObjectMapsList) {
		// Create the body of the CQ
		List<Atom> body = new ArrayList<Atom>();
		
		// Store concept in the body, if any
		String subjectUriTemplate = predicateSubjectMap.getTargetMapping();
		Function subjectTerm = getUriFunctionTerm(subjectUriTemplate);
		if (!predicateSubjectMap.getName().isEmpty()) {
			Atom concept = dfac.getAtom(predicateSubjectMap.getSourcePredicate(), subjectTerm);
			body.add(concept);
		}
		
		// Store attributes and roles in the body
		Set<Variable> variableSet = new HashSet<Variable>();
		for (MapItem predicateObjectMap : predicateObjectMapsList) {
			if (predicateObjectMap.isObjectMap()) { // if an attribute
				String columnName = predicateObjectMap.getTargetMapping();
				if (columnName.startsWith("$") || columnName.startsWith("?")) {
					columnName = columnName.substring(1, columnName.length());
				}
				Variable var = dfac.getVariable(columnName);
				variableSet.add(var);
				
				// Check if the variable has a data type definition
				Term objectTerm = var;
				if (predicateObjectMap.getDataType() != null) {
					objectTerm = dfac.getFunctionalTerm(predicateObjectMap.getDataType(), var);
				}
				Atom attribute = dfac.getAtom(predicateObjectMap.getSourcePredicate(), subjectTerm, objectTerm);
				body.add(attribute);
			} else if (predicateObjectMap.isRefObjectMap()) { // if a role
				String objectUriTemplate = predicateObjectMap.getTargetMapping();
				Function objectTerm = getUriFunctionTerm(objectUriTemplate);
				Atom role = dfac.getAtom(predicateObjectMap.getSourcePredicate(), subjectTerm, objectTerm);
				body.add(role);
			}
		}
		
		// Create the head
		List<Term> distinguishVariables = new ArrayList<Term>(variableSet);
		int arity = distinguishVariables.size();
		Atom head = dfac.getAtom(dfac.getPredicate(OBDALibConstants.QUERY_HEAD_URI, arity, null), distinguishVariables);
		
		// Create and return the conjunctive query
		return dfac.getCQIE(head, body);
	}

	private Function getUriFunctionTerm(String template) {

		// To store the variables contained in the template string
		List<Term> terms = new ArrayList<Term>();
		
		// Input = http://www.example.org/person/{$var1}/{$var2}
		while (template.contains("{") && template.contains("}")) {
			// register the position for symbol "{" and "}"
			int start = template.indexOf("{");
			int end = template.indexOf("}");

			// extract the whole placeholder, i.e., "{$var1}"
			String placeHolder = template.substring(start, end + 1);
			
			// change the placeholder string temporarly, i.e., http://www.example.org/person/[]/{$var2}
			template = template.replace(placeHolder, "[]");

			// extract the variable name only, e.g., "{$var1}" --> "var1"
			try {
				String variableName = placeHolder.substring(2, placeHolder.length() - 1);
				if (variableName.equals("")) {
					throw new RuntimeException("Variable name must have at least 1 character");
				}
				terms.add(dfac.getVariable(variableName));
			} catch (IndexOutOfBoundsException e) {
				throw new RuntimeException("Variable name must have at least 1 character");
			}
			// and repeat!
		}
		// replace the temporal placeholder to the original, i.e., http://www.example.org/person/{}/{}
		template = template.replaceAll("\\[\\]", "{}");
		ValueConstant uriTemplate = dfac.getValueConstant(template);

		// the URI template is always on the first position in the term list
		terms.add(0, uriTemplate);

		return dfac.getFunctionalTerm(dfac.getUriTemplatePredicate(terms.size()), terms);
	}

	private String getDefaultNamespace(boolean usePrefix) {
		String defaultNamespace = prefixManager.getDefaultPrefix();
		if (usePrefix) {
			defaultNamespace = prefixManager.getShortForm(defaultNamespace, true);
		}
		return defaultNamespace;
	}
	
	private void clearForm() {
		cboDataSet.setSelectedIndex(-1);
		txtQueryEditor.setText("");
		tblQueryResult.setModel(new DefaultTableModel());
		cboClassAutoSuggest.setSelectedIndex(-1);
		txtClassUriTemplate.setText(getDefaultNamespace(true));
		pnlPropertyEditorList.clear();
		predicateSubjectMap = new MapItem();
	}
	
	private void txtClassUriTemplateFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtClassUriTemplateFocusLost
		String uriTemplate = prefixManager.getExpandForm(txtClassUriTemplate.getText(), true);
		predicateSubjectMap.setTargetMapping(uriTemplate);
	}// GEN-LAST:event_txtClassUriTemplateFocusLost

	private void cboClassAutoSuggestItemStateChanged(java.awt.event.ItemEvent evt) {
		// Get the affected item
		Object obj = evt.getItem();
		if (obj instanceof PredicateItem) {
			PredicateItem selectedItem = (PredicateItem) obj;
			predicateSubjectMap = new MapItem(selectedItem);
		}
	}
	
	private void txtClassUriTemplateKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtClassUriKeyPressed
		int code = evt.getKeyCode();
		if (code == KeyEvent.VK_ESCAPE) {
			txtClassUriTemplate.setText("");
		} else if (code == KeyEvent.VK_ENTER) {
			pnlProperties.getComponent(0).requestFocusInWindow();
		}
	}// GEN-LAST:event_txtClassUriKeyPressed
	
	private void cboDataSetActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cboDataSetActionPerformed
		write(""); // clear the text editor
		JComboBox cb = (JComboBox) evt.getSource();
		if (cb.getSelectedIndex() != -1) {
			DataDefinition dd = (DataDefinition) cb.getSelectedItem();
			if (dd != null) {
				String sql = generateSQLString(dd);
				write(sql);
			}
			executeQuery();
		}
	}// GEN-LAST:event_cboDataSetActionPerformed
	
	private String generateSQLString(DataDefinition table) {
		StringBuffer sb = new StringBuffer("select");
		boolean needComma = false;
		for (Attribute attr : table.getAttributes()) {
			if (needComma) {
				sb.append(",");
			}
			sb.append(" ");
			sb.append(attr.getName());
			needComma = true;
		}
		sb.append(" ");
		sb.append("from");
		sb.append(" ");
		sb.append(table.getName());
		return sb.toString();
	}

	private void cmdExecuteActionPerformed(java.awt.event.ActionEvent evt) {
		if (selectedSource == null) {
			DialogUtils.showQuickErrorDialog(null, new Exception("Data source has not been defined."));
		} else {
			executeQuery();
		}
	}
	
	private void executeQuery() {
		try {
			releaseResultset();
			OBDAProgessMonitor progMonitor = new OBDAProgessMonitor("Executing query...");
			CountDownLatch latch = new CountDownLatch(1);
			ExecuteSQLQueryAction action = new ExecuteSQLQueryAction(latch);
			progMonitor.addProgressListener(action);
			progMonitor.start();
			action.run();
			latch.await();
			progMonitor.stop();
			ResultSet set = action.getResult();
			if (set != null) {
				IncrementalResultSetTableModel model = new IncrementalResultSetTableModel(set);
				tblQueryResult.setModel(model);
				set.close();
			}
		} catch (Exception e) {
			DialogUtils.showQuickErrorDialog(null, e);
		}
	}

	private void releaseResultset() {
		TableModel model = tblQueryResult.getModel();
		if (model == null) {
			return;
		}
		if (!(model instanceof IncrementalResultSetTableModel)) {
			return;
		}
		IncrementalResultSetTableModel imodel = (IncrementalResultSetTableModel) model;
		imodel.close();
	}

	@Override
	public void datasourceChanged(OBDADataSource oldSource, OBDADataSource newSource) {
		selectedSource = newSource;
		addDatabaseTableToDataSetComboBox();
		releaseResultset();
		clearForm();
	}

	private void addDatabaseTableToDataSetComboBox() {
		DefaultComboBoxModel relationList = new DefaultComboBoxModel();
		try {
			JDBCConnectionManager man = JDBCConnectionManager.getJDBCConnectionManager();
			DBMetadata md = man.getMetaData(selectedSource);
			for (DataDefinition relation : md.getRelationList()) {
				relationList.addElement(relation);
			}
		} catch (SQLException e) {
			// NO-OP
		}
		cboDataSet.setModel(relationList);
		cboDataSet.setSelectedIndex(-1);
	}

	private void write(String text) {
		txtQueryEditor.setText(text);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboDataSet;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdCreateMapping;
    private javax.swing.JButton cmdExecute;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblClassIcon;
    private javax.swing.JLabel lblDataSet;
    private javax.swing.JLabel lblMapIcon;
    private javax.swing.JLabel lblProperties;
    private javax.swing.JLabel lblRows;
    private javax.swing.JLabel lblShow;
    private javax.swing.JPanel pnlClassMap;
    private javax.swing.JPanel pnlClassSeachComboBox;
    private AutoSuggestComboBox cboClassAutoSuggest;
    private javax.swing.JPanel pnlClassSearch;
    private javax.swing.JPanel pnlClassUriTemplate;
    private javax.swing.JPanel pnlCommandButtons;
    private javax.swing.JPanel pnlConcept;
    private javax.swing.JPanel pnlDataBrowser;
    private javax.swing.JPanel pnlDataSet;
    private javax.swing.JPanel pnlEditor;
    private javax.swing.JPanel pnlOntologyBrowser;
    private javax.swing.JPanel pnlProperties;
    private javax.swing.JPanel pnlPropertiesLabel;
    private javax.swing.JPanel pnlPropertyList;
    private PropertyMappingPanel pnlPropertyEditorList;
    private javax.swing.JPanel pnlQueryEditor;
    private javax.swing.JPanel pnlResult;
    private javax.swing.JPanel pnlResultFilter;
    private javax.swing.JScrollPane scrQueryEditor;
    private javax.swing.JScrollPane scrQueryResult;
    private SQLResultTable tblQueryResult;
    private javax.swing.JSplitPane splMainSplitter;
    private javax.swing.JSplitPane splSqlQuery;
    private javax.swing.JTextField txtClassUriTemplate;
    private javax.swing.JEditorPane txtQueryEditor;
    private javax.swing.JTextField txtRowCount;
    // End of variables declaration//GEN-END:variables

	private class DataSetItemRenderer extends JLabel implements ListCellRenderer {
		private static final long serialVersionUID = 1L;
		@Override
		public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			if (list.getModel().getSize() == 0) {
				setText("<No table found>");
			} else {
				if (index == -1) {
					setText("<Select database table>");
				}
				
				if (value != null) {
					DataDefinition relation = (DataDefinition) value;
					if (relation instanceof TableDefinition) {
						ImageIcon icon = IconLoader.getImageIcon("images/db_table.png");
						setIcon(icon);
						setText(relation.getName());
					} else if (relation instanceof ViewDefinition) {
						ImageIcon icon = IconLoader.getImageIcon("images/db_view.png");
						setIcon(icon);
						setText(relation.getName());
					}
				}
			}
			return this;
		}
	}

	private class ExecuteSQLQueryAction implements OBDAProgressListener {
		CountDownLatch latch = null;
		Thread thread = null;
		ResultSet result = null;
		Statement statement = null;

		private ExecuteSQLQueryAction(CountDownLatch latch) {
			this.latch = latch;
		}

		@Override
		public void actionCanceled() throws SQLException {
			if (thread != null) {
				thread.interrupt();
			}
			if (statement != null && !statement.isClosed()) {
				statement.close();
			}
			result = null;
			latch.countDown();
		}

		public ResultSet getResult() {
			return result;
		}

		public void run() {
			thread = new Thread() {
				public void run() {
					// Construct the sql query
					SQLDialectAdapter sqlDialect = SQLAdapterFactory.getSQLDialectAdapter(selectedSource.getParameter(RDBMSourceParameterConstants.DATABASE_DRIVER));
					StringBuffer sb = new StringBuffer(txtQueryEditor.getText());
					long rowCount = Long.parseLong(txtRowCount.getText());
					if (rowCount != 0) { // add the limit filter
						sb.append(" ");
						sb.append(sqlDialect.sqlSlice(rowCount, 0));
					}
					// Execute the sql query
					try {
						TableModel oldmodel = tblQueryResult.getModel();
						if ((oldmodel != null) && (oldmodel instanceof IncrementalResultSetTableModel)) {
							IncrementalResultSetTableModel rstm = (IncrementalResultSetTableModel) oldmodel;
							rstm.close();
						}
						JDBCConnectionManager man = JDBCConnectionManager.getJDBCConnectionManager();
						Connection c = man.getConnection(selectedSource);
						Statement s = c.createStatement();
						result = s.executeQuery(sb.toString());
						latch.countDown();
					} catch (Exception e) {
						latch.countDown();
						JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
					}
				}
			};
			thread.start();
		}
	}
}
