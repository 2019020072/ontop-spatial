package it.unibz.krdb.obda.protege4.panels;

import it.unibz.krdb.obda.gui.swing.treemodel.IncrementalResultSetTableModel;
import it.unibz.krdb.obda.gui.swing.utils.DatasourceSelectorListener;
import it.unibz.krdb.obda.gui.swing.utils.OBDAProgessMonitor;
import it.unibz.krdb.obda.gui.swing.utils.OBDAProgressListener;
import it.unibz.krdb.obda.model.OBDADataSource;
import it.unibz.krdb.obda.model.impl.RDBMSourceParameterConstants;
import it.unibz.krdb.obda.owlrefplatform.core.queryevaluation.SQLAdapterFactory;
import it.unibz.krdb.obda.owlrefplatform.core.queryevaluation.SQLDialectAdapter;
import it.unibz.krdb.obda.protege4.gui.IconLoader;
import it.unibz.krdb.obda.protege4.gui.component.SQLResultTable;
import it.unibz.krdb.sql.DBMetadata;
import it.unibz.krdb.sql.DataDefinition;
import it.unibz.krdb.sql.JDBCConnectionManager;
import it.unibz.krdb.sql.TableDefinition;
import it.unibz.krdb.sql.ViewDefinition;

import java.awt.Component;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.CountDownLatch;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.table.TableModel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SQLQueryPanel extends javax.swing.JPanel implements DatasourceSelectorListener {

	private static final long serialVersionUID = 1L;

	private OBDADataSource selectedSource;

	private Logger log = LoggerFactory.getLogger(SQLQueryPanel.class);

	public SQLQueryPanel() {
		initComponents();
	}

	public SQLQueryPanel(OBDADataSource ds, String query) {
		initComponents();
		selectedSource = ds;
		cmdExecuteActionPerformed(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splSqlQuery = new javax.swing.JSplitPane();
        pnlEditor = new javax.swing.JPanel();
        pnlDataSet = new javax.swing.JPanel();
        lblDataSet = new javax.swing.JLabel();
        cboDataSet = new javax.swing.JComboBox();
        cmdExecute = new javax.swing.JButton();
        pnlQueryEditor = new javax.swing.JPanel();
        scrQueryEditor = new javax.swing.JScrollPane();
        txtQueryEditor = new javax.swing.JEditorPane();
        pnlResultFilter = new javax.swing.JPanel();
        lblShow = new javax.swing.JLabel();
        txtRowCount = new javax.swing.JTextField();
        lblRows = new javax.swing.JLabel();
        pnlResult = new javax.swing.JPanel();
        scrQueryResult = new javax.swing.JScrollPane();

        setAlignmentX(5.0F);
        setAlignmentY(5.0F);
        setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        setPreferredSize(new java.awt.Dimension(640, 480));
        setLayout(new java.awt.BorderLayout(5, 5));

        splSqlQuery.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splSqlQuery.setResizeWeight(0.3);

        pnlEditor.setMinimumSize(new java.awt.Dimension(156, 100));
        pnlEditor.setPreferredSize(new java.awt.Dimension(156, 100));
        pnlEditor.setLayout(new java.awt.BorderLayout());

        pnlDataSet.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblDataSet.setText("Data Set:");
        pnlDataSet.add(lblDataSet);

        cboDataSet.setMinimumSize(new java.awt.Dimension(23, 23));
        cboDataSet.setPreferredSize(new java.awt.Dimension(240, 23));
        cboDataSet.setRenderer(new DataSetItemRenderer());
        cboDataSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDataSetActionPerformed(evt);
            }
        });
        pnlDataSet.add(cboDataSet);

        cmdExecute.setToolTipText("Execute query");
        cmdExecute.setIcon(IconLoader.getImageIcon("images/execute.png"));
        cmdExecute.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cmdExecute.setContentAreaFilled(false);
        cmdExecute.setPreferredSize(new java.awt.Dimension(25, 25));
        cmdExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExecuteActionPerformed(evt);
            }
        });
        pnlDataSet.add(cmdExecute);

        pnlEditor.add(pnlDataSet, java.awt.BorderLayout.PAGE_START);

        pnlQueryEditor.setLayout(new java.awt.BorderLayout());

        txtQueryEditor.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        scrQueryEditor.setViewportView(txtQueryEditor);

        pnlQueryEditor.add(scrQueryEditor, java.awt.BorderLayout.CENTER);

        pnlEditor.add(pnlQueryEditor, java.awt.BorderLayout.CENTER);

        pnlResultFilter.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblShow.setText("Show");
        pnlResultFilter.add(lblShow);

        txtRowCount.setText("20");
        txtRowCount.setToolTipText("Insert the limit for data preview or 0 to present all data");
        txtRowCount.setMinimumSize(new java.awt.Dimension(25, 18));
        txtRowCount.setPreferredSize(new java.awt.Dimension(25, 18));
        pnlResultFilter.add(txtRowCount);

        lblRows.setText("rows");
        pnlResultFilter.add(lblRows);

        pnlEditor.add(pnlResultFilter, java.awt.BorderLayout.PAGE_END);

        splSqlQuery.setLeftComponent(pnlEditor);

        pnlResult.setLayout(new java.awt.BorderLayout());

        tblQueryResult = new SQLResultTable();
        tblQueryResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][] { /* Empty */ },
            new String[] { "Results" }));
    tblQueryResult.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    scrQueryResult.setViewportView(tblQueryResult);
    pnlResult.add(scrQueryResult, java.awt.BorderLayout.CENTER);

    splSqlQuery.setRightComponent(pnlResult);

    add(splSqlQuery, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

	private void cboDataSetActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cboDataSetActionPerformed
		write(""); // clear the text editor
		JComboBox cb = (JComboBox) evt.getSource();
		DataDefinition dd = (DataDefinition) cb.getSelectedItem();
		String simpleQuery = String.format("select * from %s", dd.getName());
		write(simpleQuery);
	}// GEN-LAST:event_cboDataSetActionPerformed
	
	private void write(String text) {
		txtQueryEditor.setText(text);
	}

	private void cmdExecuteActionPerformed(java.awt.event.ActionEvent evt) {
		releaseResultset();
		try {
			if (selectedSource == null) {
				JOptionPane.showMessageDialog(this, "Please select data source first", "Error", JOptionPane.ERROR_MESSAGE);
			} else {
				OBDAProgessMonitor progMonitor = new OBDAProgessMonitor("Executing query...");
				CountDownLatch latch = new CountDownLatch(1);
				ExecuteSQLQueryAction action = new ExecuteSQLQueryAction(latch);
				progMonitor.addProgressListener(action);
				progMonitor.start();
				action.run();
				latch.await();
				progMonitor.stop();
				ResultSet set = action.getResult();
				if (set != null) {
					IncrementalResultSetTableModel model = new IncrementalResultSetTableModel(set);
					tblQueryResult.setModel(model);
					set.close();
				}
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
			log.error("Error while executing query.", e);
		}
	}

	private void releaseResultset() {
		TableModel model = tblQueryResult.getModel();
		if (model == null) {
			return;
		}
		if (!(model instanceof IncrementalResultSetTableModel)) {
			return;
		}
		IncrementalResultSetTableModel imodel = (IncrementalResultSetTableModel) model;
		imodel.close();
	}

	@Override
	public void datasourceChanged(OBDADataSource oldSource, OBDADataSource newSource) {
		selectedSource = newSource;
		addDatabaseTableToDataSetComboBox();
		releaseResultset();
	}

	private void addDatabaseTableToDataSetComboBox() {
		DefaultComboBoxModel relationList = new DefaultComboBoxModel();
		try {
			JDBCConnectionManager man = JDBCConnectionManager.getJDBCConnectionManager();
			DBMetadata md = man.getMetaData(selectedSource);
			for (DataDefinition relation : md.getRelationList()) {
				relationList.addElement(relation);
			}
		} catch (SQLException e) {
			// NO-OP
		}
		cboDataSet.setModel(relationList);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboDataSet;
    private javax.swing.JButton cmdExecute;
    private javax.swing.JLabel lblDataSet;
    private javax.swing.JLabel lblRows;
    private javax.swing.JLabel lblShow;
    private javax.swing.JPanel pnlDataSet;
    private javax.swing.JPanel pnlEditor;
    private javax.swing.JPanel pnlQueryEditor;
    private javax.swing.JPanel pnlResult;
    private javax.swing.JPanel pnlResultFilter;
    private javax.swing.JScrollPane scrQueryEditor;
    private javax.swing.JScrollPane scrQueryResult;
    private SQLResultTable tblQueryResult;
    private javax.swing.JSplitPane splSqlQuery;
    private javax.swing.JEditorPane txtQueryEditor;
    private javax.swing.JTextField txtRowCount;
    // End of variables declaration//GEN-END:variables

	private class DataSetItemRenderer extends JLabel implements ListCellRenderer {
		private static final long serialVersionUID = 1L;
		@Override
		public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			if (value == null) {
				setText("<No table found>");
			} 
			else {
				DataDefinition relation = (DataDefinition) value;
				if (relation instanceof TableDefinition) {
					ImageIcon icon = IconLoader.getImageIcon("images/db_table.png");
					setIcon(icon);
					setText(relation.getName());
				} else if (relation instanceof ViewDefinition) {
					ImageIcon icon = IconLoader.getImageIcon("images/db_view.png");
					setIcon(icon);
					setText(relation.getName());
				}
			}
			return this;
		}
	}

	private class ExecuteSQLQueryAction implements OBDAProgressListener {

		CountDownLatch latch = null;
		Thread thread = null;
		ResultSet result = null;
		Statement statement = null;

		private ExecuteSQLQueryAction(CountDownLatch latch) {
			this.latch = latch;
		}

		@Override
		public void actionCanceled() throws SQLException {
			if (thread != null) {
				thread.interrupt();
			}
			if (statement != null && !statement.isClosed()) {
				statement.close();
			}
			result = null;
			latch.countDown();
		}

		public ResultSet getResult() {
			return result;
		}

		public void run() {
			thread = new Thread() {
				public void run() {
					// Construct the sql query
					SQLDialectAdapter sqlDialect = SQLAdapterFactory.getSQLDialectAdapter(selectedSource.getParameter(RDBMSourceParameterConstants.DATABASE_DRIVER));
					StringBuffer sb = new StringBuffer(txtQueryEditor.getText());
					long rowCount = Long.parseLong(txtRowCount.getText());
					if (rowCount != 0) { // add the limit filter
						sb.append(" ");
						sb.append(sqlDialect.sqlSlice(rowCount, 0));
					}
					// Execute the sql query
					try {
						TableModel oldmodel = tblQueryResult.getModel();
						if ((oldmodel != null) && (oldmodel instanceof IncrementalResultSetTableModel)) {
							IncrementalResultSetTableModel rstm = (IncrementalResultSetTableModel) oldmodel;
							rstm.close();
						}
						JDBCConnectionManager man = JDBCConnectionManager.getJDBCConnectionManager();
						Connection c = man.getConnection(selectedSource);
						Statement s = c.createStatement();
						result = s.executeQuery(sb.toString());
						latch.countDown();
					} catch (Exception e) {
						latch.countDown();
						JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
						log.error("Error while executing query.", e);
					}
				}
			};
			thread.start();
		}
	}
}
