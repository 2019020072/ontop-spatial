
# Indicates which rewriting techniques should be used. Either 'dlr' which
# is a direct implementation of the PerfectRef algorithm, or 'improved' which
# is a rewriting technique, based on PerfectRef, but improved in many ways to 
# avoid the generation of redundant queries
# OPT:{PerfectRef, UCQ-based}
org.obda.owlreformulationplatform.reformulationTechnique=UCQ-based


# Indicates if the system should work in 'virtual' mode (the system should read
# the user defined mappings of the OBDA model) or 'material' model (the system
# should assume a set of predefined mappings, see dbtype parameter) 
#OPT:{classic, virtual}
org.obda.owlreformulationplatform.aboxmode=virtual

# If woring in 'material' mode, this option indicates if the schema
# of the database where the data is stored corresponds to a 'direct' mapping
# (one table per concept/property), 'universal' (one table for all concept, and
# one table for all properties) or 'semantic' (a universal-like schema however, the
# indexes are given w.r.t. the semantics of the ontology).
# OPT:{direct, universal, semantic}
org.obda.owlreformulationplatform.dbtype=direct

# If working in 'material' mode, this option indicates if the data 
# is stored in a 'provided' JDBC database or, if the data is in the
# input ontology and should be kept in an 'inmemory' database
# OPT:{provided, inmemory}
org.obda.owlreformulationplatform.datalocation=inmemory


# Ignore this parameter, is used of internal testing only.
# OPT:{true, false}
org.obda.owlreformulationplatform.createTestMappings=true