<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<parent>
		<artifactId>parent</artifactId>
		<groupId>inf.unibz.it.obda</groupId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath>../parent</relativePath>
	</parent>
	<modelVersion>4.0.0</modelVersion>
	<artifactId>obdalib-protege4</artifactId>
	<packaging>bundle</packaging>
	<name>OBDA Plugin for Protege 4.</name>

	<repositories>
		<!-- This repository holds protege 4 and obdalib related dependencies, the 
		machine will change soon to obdavm instead of obdalin -->
		<repository>
			<id>obda.inf.unibz.it</id>
			<name>FUB OBDA Maven repository</name>
			<url>http://obdavm.inf.unibz.it:8080/nexus/content/groups/public
			</url>
			<layout>default</layout>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
	</repositories>

	<dependencies>

		<!--
			<dependency> <groupId>org.apache.felix</groupId>
			<artifactId>org.osgi.core</artifactId> <version>1.0.0</version>
			<scope>provided</scope> </dependency>
		-->
		
		<!-- OBDA libraries -->
		
		<!-- These are dependencies to the OBDA related classes. -->
		
		<dependency>
			<groupId>inf.unibz.it.obda</groupId>
			<artifactId>obdalib</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>inf.unibz.it.obda</groupId>
			<artifactId>obdalib-owlapi</artifactId>
			<version>1.0-alpha-1</version>
		</dependency>

		<!--Dependencies from the OBDA projects to include in the jar -->
		
		<!-- All the following dependencies are required at compilation or 
		runtime and are not available in the OSGi, or Protege 4 classpath. They
		must be packed together with the bundle. They have a default scope of
		runtime and compilation -->
		
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>3.1.3</version>
		</dependency>
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr-runtime</artifactId>
			<version>3.1.3</version>
		</dependency>
		<dependency>
			<groupId>com.hp.hpl.jena</groupId>
			<artifactId>jena</artifactId>
			<version>2.5.5</version>
		</dependency>
		<dependency>
			<groupId>com.hp.hpl.jena</groupId>
			<artifactId>iri</artifactId>
			<version>0.8</version>
		</dependency>
		<dependency>
			<groupId>com.hp.hpl.jena</groupId>
			<artifactId>arq</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
			<version>3.4.4</version>
		</dependency>

		
		<dependency>
			<groupId>activemq</groupId>
			<artifactId>relaxngDatatype</artifactId>
			<version>20050407</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.5.11</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>0.9.20</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>0.9.20</version>
		</dependency>
		<dependency>
			<groupId>xsdlib</groupId>
			<artifactId>xsdlib</artifactId>
			<version>20030225</version>
		</dependency>
		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
			<version>2.7.1</version>
		</dependency>


		
		<!-- JDBC Drivers (to be removed soon) -->
		
		<!-- These are temporaly required, soon we will use another mechanism
		for declaring JDBC drivers and these dependencies will be removed.  -->
		
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.12</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc14</artifactId>
			<version>10.2.0.1.0</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>8.4-701.jdbc4</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.ibm</groupId>
			<artifactId>db2jcc_license</artifactId>
			<version>1.3.1</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.ibm</groupId>
			<artifactId>db2jcc</artifactId>
			<version>9.0</version>
			<scope>runtime</scope>
		</dependency>


		<!-- Note the use of "provided" scope. These are only used for compilation
		and should not be packed with the bundle. The platform will provide the dependencies
		needed (equinox and the protege bundles) -->

		<!-- Required by OSGi plugins -->
		
		
		<dependency>
			<groupId>org.eclipse.equinox</groupId>
			<artifactId>osgi</artifactId>
			<version>3.1.1</version>
			<scope>provided</scope>
		</dependency>

		<!-- Eclipse dependencies -->
		<dependency>
			<groupId>org.eclipse.equinox</groupId>
			<artifactId>common</artifactId>
			<version>3.3.0-v20070426</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.equinox</groupId>
			<artifactId>registry</artifactId>
			<version>3.3.0-v20070522</version>
			<scope>provided</scope>
		</dependency>

		<!-- Protege 4 and OWLAPI bundle dependencies -->
		<dependency>
			<groupId>org.protege</groupId>
			<artifactId>org.protege.common</artifactId>
			<version>4.0.2-031220091250</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.protege</groupId>
			<artifactId>org.protege.editor.core.application</artifactId>
			<version>4.0.2-031220091250</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.protege</groupId>
			<artifactId>org.protege.editor.owl</artifactId>
			<version>4.0.2-031220091250</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.semanticweb</groupId>
			<artifactId>org.semanticweb.owl.owlapi</artifactId>
			<version>4.0.2-031220091250</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<!-- This plugin is required to assure that version 1.6 of the JDK is
				used during compilation -->
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>    
				<!-- This is the main plugin to build the bundle. Informattion about this plugin
				can be found here: http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html
				Note the inline comments-->
				
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<extensions>true</extensions>
				<configuration>
					<!-- The follwing is the set of instructions of how pack the bundle and how to 
					create the MANIFEST.MF for the bundle. The configuration does 4 things. 
					
					1. It makes sure that the "tight" dependencies are not packed as jars, but as .class files (inline).
					It makes sure that all the runtime dependencies are packed as jars.
					2. It makes sure all the protege plugin resources are packed (plugin.xml, tabs*.xml, etc). 
					3. It makes	sure the META-INF/MANIFEST.MF for OSGi bundles is created with the correct imports,
					exports and classpath.
					
					 -->
					<instructions>
						<Build-Jdk>1.6</Build-Jdk>
						
						<!-- This makes sure any dependency in the obdalib <dependency> dependencies are packed
						as .classes (uncompressed, no jars) and the rest is packed as .jars -->
						<Embed-Dependency>obdalib*;groupId=inf.unibz.it.obda;inline=true,*;groupId=!inf.unibz.it.obda;scope=compile|runtime</Embed-Dependency>
						
						<!-- necessary for protege 4 plugins -->
						<Bundle-Category>protege</Bundle-Category>
						
						<!--  general information -->
						<Bundle-ContactAddress>rodriguez@inf.unibz.it</Bundle-ContactAddress>
						<Bundle-DocURL>http://obda.inf.unibz.it</Bundle-DocURL>
						<Bundle-Description>The Ontology Based Data Access (OBDA) Plugin
							for Protege 4</Bundle-Description>
						<Bundle-Vendor>Free University of Bozen Bolzano</Bundle-Vendor>
						
						<!-- Required. Remember to use the proper version for dependencies -->
						<Bundle-Version>1.0.0</Bundle-Version>
						<Eclipse-LazyStart>false</Eclipse-LazyStart>
						
						<!-- The name of the plugin for OSGi dependencies. It has to be singleton or protege wont load it -->
						<Bundle-SymbolicName>inf.unibz.it.obda.protege4.obdaplugin;singleton:=true</Bundle-SymbolicName>
						
						<!-- This makes sure ONLY the necessary dependencies are imported. If this is not supplied, maven-bundle-plugin
						will attempt to import ALL classes in the dependencies (even transitive ones) This will lead to class not
						found exceptions. It's very important to assure only the needed depdencies are imported.  
						 -->
						<Import-Package>com.hp.hpl.jena.iri.*,org.apache.commons.logging.*,com.hp.hpl.jena.query.*,org.apache.log4j.*,org.atlr.*,org.slf4j.*,org.protege.*,org.coode.*,org.semanticweb.*,uk.manchester.*,!*</Import-Package>
						
						<!-- This makes sure all OBDA classes are exported and available in dependent projects -->
						<Export-Package>inf.unibz.it.*</Export-Package>
						
						
						<!-- Not needed anymore, it was necessary when we were not using import-package
							<Require-Bundle>org.eclipse.equinox.registry,org.eclipse.equinox.common,org.protege.common,org.protege.editor.core.application,org.protege.editor.owl,org.semanticweb.owl.owlapi</Require-Bundle>
						-->
					</instructions>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>