package it.unibz.krdb.obda.protege4.panels;

import it.unibz.krdb.obda.owlapi2.QuestPreferences;
import it.unibz.krdb.obda.owlrefplatform.core.QuestConstants;

public class ConfigPanel extends javax.swing.JPanel {

    /**
	 * 
	 */
	private static final long serialVersionUID = 602382682995021070L;
	private QuestPreferences preference;

    /**
     * The constructor.
     */
    public ConfigPanel(QuestPreferences preference) {
        this.preference = preference;
        initComponents();
        setSelections(preference);
    }

    private void setSelections(QuestPreferences preference) {

        String value = (String) preference.getCurrentValue(QuestPreferences.REFORMULATION_TECHNIQUE);
        if (value.equals(QuestConstants.UCQBASED)) {
            cmbReformulationMethods.setSelectedIndex(0);
        }
        else if (value.equals(QuestConstants.PERFECTREFORMULATION)) {
            cmbReformulationMethods.setSelectedIndex(1);
        }

        boolean bChecked = preference.getCurrentBooleanValueFor(QuestPreferences.OPTIMIZE_EQUIVALENCES);
        chkOptimizeEquivalences.setSelected(bChecked);

        value = (String) preference.getCurrentValue(QuestPreferences.ABOX_MODE);
        if (value.equals(QuestConstants.VIRTUAL)) {
            virtualModeSelected();
        }
        else if (value.equals(QuestConstants.CLASSIC)) {
            classicModeSelected();
        }

//        value = (String) preference.getCurrentValue(ReformulationPlatformPreferences.DATA_LOCATION);
//        if (value.equals(QuestConstants.PROVIDED)) {
//            radRemoteDatabase.setSelected(true);
//        }
//        else if (value.equals(QuestConstants.INMEMORY)) {
            radInMemoryDatabase.setSelected(true);
//        }

        value = (String) preference.getCurrentValue(QuestPreferences.DBTYPE);
        if (value.equals(QuestConstants.DIRECT)) {
            radDirect.setSelected(true);
        }
        else if (value.equals(QuestConstants.UNIVERSAL)) {
            radUniversal.setSelected(true);
        }
        else if (value.equals(QuestConstants.SEMANTIC)) {
            radSemanticIndex.setSelected(true);
        }

        bChecked = preference.getCurrentBooleanValueFor(QuestPreferences.OBTAIN_FROM_ONTOLOGY);
        chkObtainFromOntology.setSelected(bChecked);

        bChecked = preference.getCurrentBooleanValueFor(QuestPreferences.OBTAIN_FROM_MAPPINGS);
        chkObtainFromMappings.setSelected(bChecked);
    }

    private void virtualModeSelected() {
        radVirtualObda.setSelected(true);
        radClassicObda.setSelected(false);

        lblDataStrategy.setEnabled(false);
        radDirect.setEnabled(false);
        radUniversal.setEnabled(false);
        radSemanticIndex.setEnabled(false);

        lblDataLocation.setEnabled(false);
        radRemoteDatabase.setEnabled(false);
        radInMemoryDatabase.setEnabled(false);

        lblDataSource.setEnabled(false);
        chkObtainFromOntology.setEnabled(false);
        chkObtainFromMappings.setEnabled(false);
    }

    private void classicModeSelected() {
        radVirtualObda.setSelected(false);
        radClassicObda.setSelected(true);

        lblDataStrategy.setEnabled(true);
        radDirect.setEnabled(true);
        radUniversal.setEnabled(false);  // not implemented yet!
        radSemanticIndex.setEnabled(true);
        radSemanticIndex.setSelected(true);  // by default

        lblDataLocation.setEnabled(true);
        radRemoteDatabase.setEnabled(false);  // not implemented yet!
        radInMemoryDatabase.setEnabled(true);
        radInMemoryDatabase.setSelected(true);  // by default

        lblDataSource.setEnabled(true);
        chkObtainFromOntology.setEnabled(true);
        chkObtainFromMappings.setEnabled(true);
        chkObtainFromOntology.setSelected(true);  // by default
        chkObtainFromMappings.setSelected(false);  // by default

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mappingMode = new javax.swing.ButtonGroup();
        mapper = new javax.swing.ButtonGroup();
        datalocationGroup = new javax.swing.ButtonGroup();
        AboxMode = new javax.swing.ButtonGroup();
        pnlTWOption = new javax.swing.JPanel();
        lblTechniqueWrapper = new javax.swing.JLabel();
        cmbTechniqueWrapper = new javax.swing.JComboBox();
        pnlTWConfiguration = new javax.swing.JPanel();
        pnlReformulationMethods = new javax.swing.JPanel();
        pnlReformulationTechnique = new javax.swing.JPanel();
        lblReformulationTechnique = new javax.swing.JLabel();
        cmbReformulationMethods = new javax.swing.JComboBox();
        pnlReformulationOption = new javax.swing.JPanel();
        pnlPadding = new javax.swing.JPanel();
        chkOptimizeEquivalences = new javax.swing.JCheckBox();
        pnlABoxConfiguration = new javax.swing.JPanel();
        pnlMappingOptions = new javax.swing.JPanel();
        pnlVirtualMode = new javax.swing.JPanel();
        radVirtualObda = new javax.swing.JRadioButton();
        lblVirtualModeInfo = new javax.swing.JLabel();
        pnlClassicMode = new javax.swing.JPanel();
        pnlClassicalModeInfo = new javax.swing.JPanel();
        radClassicObda = new javax.swing.JRadioButton();
        lblClassicModeInfo = new javax.swing.JLabel();
        pnlDatabaseType = new javax.swing.JPanel();
        lblDataStrategy = new javax.swing.JLabel();
        radDirect = new javax.swing.JRadioButton();
        radUniversal = new javax.swing.JRadioButton();
        radSemanticIndex = new javax.swing.JRadioButton();
        pnlDataLocation = new javax.swing.JPanel();
        lblDataLocation = new javax.swing.JLabel();
        radRemoteDatabase = new javax.swing.JRadioButton();
        radInMemoryDatabase = new javax.swing.JRadioButton();
        pnlABoxSource = new javax.swing.JPanel();
        lblDataSource = new javax.swing.JLabel();
        chkObtainFromOntology = new javax.swing.JCheckBox();
        chkObtainFromMappings = new javax.swing.JCheckBox();

        setMinimumSize(new java.awt.Dimension(525, 485));
        setPreferredSize(new java.awt.Dimension(525, 485));
        setLayout(new java.awt.BorderLayout(0, 5));

        pnlTWOption.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Technique Wrappers"));
        pnlTWOption.setMinimumSize(new java.awt.Dimension(525, 70));
        pnlTWOption.setPreferredSize(new java.awt.Dimension(525, 70));
        pnlTWOption.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 7));

        lblTechniqueWrapper.setText("Technique Wrapper:");
        lblTechniqueWrapper.setMinimumSize(new java.awt.Dimension(170, 30));
        lblTechniqueWrapper.setPreferredSize(new java.awt.Dimension(140, 20));
        pnlTWOption.add(lblTechniqueWrapper);

        cmbTechniqueWrapper.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Quest Technique Wrapper" }));
        cmbTechniqueWrapper.setMaximumSize(new java.awt.Dimension(180, 32767));
        cmbTechniqueWrapper.setMinimumSize(new java.awt.Dimension(125, 18));
        cmbTechniqueWrapper.setPreferredSize(new java.awt.Dimension(280, 20));
        cmbTechniqueWrapper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTechniqueWrapperActionPerformed(evt);
            }
        });
        pnlTWOption.add(cmbTechniqueWrapper);

        add(pnlTWOption, java.awt.BorderLayout.NORTH);
        pnlTWOption.getAccessibleContext().setAccessibleName("Bolzano Reformulation Technique");

        pnlTWConfiguration.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Technique Wrapper Configuration"));
        pnlTWConfiguration.setMinimumSize(new java.awt.Dimension(525, 405));
        pnlTWConfiguration.setPreferredSize(new java.awt.Dimension(525, 405));
        pnlTWConfiguration.setLayout(new java.awt.GridBagLayout());

        pnlReformulationMethods.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Reformulation Methods\n"));
        pnlReformulationMethods.setMinimumSize(new java.awt.Dimension(590, 85));
        pnlReformulationMethods.setPreferredSize(new java.awt.Dimension(590, 85));
        pnlReformulationMethods.setRequestFocusEnabled(false);
        pnlReformulationMethods.setLayout(new java.awt.GridBagLayout());

        lblReformulationTechnique.setText("Reformulation Method: ");
        lblReformulationTechnique.setMinimumSize(new java.awt.Dimension(150, 30));
        lblReformulationTechnique.setPreferredSize(new java.awt.Dimension(150, 20));
        pnlReformulationTechnique.add(lblReformulationTechnique);

        cmbReformulationMethods.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Quest's reformulation", "PerfectRef", " " }));
        cmbReformulationMethods.setPreferredSize(new java.awt.Dimension(280, 20));
        cmbReformulationMethods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbReformulationMethodsActionPerformed(evt);
            }
        });
        pnlReformulationTechnique.add(cmbReformulationMethods);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(-8, 0, 0, 0);
        pnlReformulationMethods.add(pnlReformulationTechnique, gridBagConstraints);

        pnlReformulationOption.setPreferredSize(new java.awt.Dimension(100, 25));

        pnlPadding.setPreferredSize(new java.awt.Dimension(75, 10));
        pnlReformulationOption.add(pnlPadding);

        chkOptimizeEquivalences.setSelected(true);
        chkOptimizeEquivalences.setText("Optimize equivalences (experimental)");
        chkOptimizeEquivalences.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkOptimizeEquivalences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkOptimizeEquivalencesActionPerformed(evt);
            }
        });
        pnlReformulationOption.add(chkOptimizeEquivalences);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(-5, 0, 0, 0);
        pnlReformulationMethods.add(pnlReformulationOption, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 6, 0, 6);
        pnlTWConfiguration.add(pnlReformulationMethods, gridBagConstraints);

        pnlABoxConfiguration.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Data Configuration"));
        pnlABoxConfiguration.setMinimumSize(new java.awt.Dimension(520, 280));
        pnlABoxConfiguration.setPreferredSize(new java.awt.Dimension(520, 280));
        pnlABoxConfiguration.setLayout(new java.awt.BorderLayout());

        pnlMappingOptions.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        pnlMappingOptions.setMinimumSize(new java.awt.Dimension(500, 270));
        pnlMappingOptions.setPreferredSize(new java.awt.Dimension(500, 270));
        pnlMappingOptions.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 3));

        pnlVirtualMode.setPreferredSize(new java.awt.Dimension(480, 20));
        pnlVirtualMode.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 0));

        AboxMode.add(radVirtualObda);
        radVirtualObda.setFont(new java.awt.Font("Tahoma", 1, 11));
        radVirtualObda.setSelected(true);
        radVirtualObda.setText("Virtual OBDA.");
        radVirtualObda.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        radVirtualObda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radVirtualObdaActionPerformed(evt);
            }
        });
        pnlVirtualMode.add(radVirtualObda);

        lblVirtualModeInfo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblVirtualModeInfo.setText("Requires OBDA model and obtains the data originally from its source.");
        lblVirtualModeInfo.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lblVirtualModeInfo.setIconTextGap(0);
        pnlVirtualMode.add(lblVirtualModeInfo);

        pnlMappingOptions.add(pnlVirtualMode);

        pnlClassicMode.setMinimumSize(new java.awt.Dimension(480, 220));
        pnlClassicMode.setPreferredSize(new java.awt.Dimension(480, 220));
        pnlClassicMode.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 2));

        pnlClassicalModeInfo.setPreferredSize(new java.awt.Dimension(480, 25));
        pnlClassicalModeInfo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 3));

        AboxMode.add(radClassicObda);
        radClassicObda.setFont(new java.awt.Font("Tahoma", 1, 11));
        radClassicObda.setText("Classic OBDA.");
        radClassicObda.setActionCommand("Classic ABox (= uses pre-defined ABox in the ontology)");
        radClassicObda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radClassicObdaActionPerformed(evt);
            }
        });
        pnlClassicalModeInfo.add(radClassicObda);
        radClassicObda.getAccessibleContext().setAccessibleName("Classic ABox. Uses pre-defined ABox in the ontology.");

        lblClassicModeInfo.setText("The reasoner imports the data into a new database (makes a copy).");
        pnlClassicalModeInfo.add(lblClassicModeInfo);

        pnlClassicMode.add(pnlClassicalModeInfo);

        pnlDatabaseType.setPreferredSize(new java.awt.Dimension(480, 95));
        pnlDatabaseType.setLayout(new java.awt.GridBagLayout());

        lblDataStrategy.setText("(1) Strategy for the database schema organization:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 27, 3, 0);
        pnlDatabaseType.add(lblDataStrategy, gridBagConstraints);

        mapper.add(radDirect);
        radDirect.setText("Direct");
        radDirect.setPreferredSize(new java.awt.Dimension(53, 20));
        radDirect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radDirectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        pnlDatabaseType.add(radDirect, gridBagConstraints);

        mapper.add(radUniversal);
        radUniversal.setText("Universal");
        radUniversal.setPreferredSize(new java.awt.Dimension(69, 20));
        radUniversal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radUniversalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        pnlDatabaseType.add(radUniversal, gridBagConstraints);

        mapper.add(radSemanticIndex);
        radSemanticIndex.setSelected(true);
        radSemanticIndex.setText("Semantic Index (recommended)");
        radSemanticIndex.setPreferredSize(new java.awt.Dimension(177, 20));
        radSemanticIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radSemanticIndexActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        pnlDatabaseType.add(radSemanticIndex, gridBagConstraints);

        pnlClassicMode.add(pnlDatabaseType);

        pnlDataLocation.setMinimumSize(new java.awt.Dimension(480, 90));
        pnlDataLocation.setPreferredSize(new java.awt.Dimension(480, 60));
        pnlDataLocation.setLayout(new java.awt.GridBagLayout());

        lblDataLocation.setText("(2) Database location:");
        lblDataLocation.setPreferredSize(new java.awt.Dimension(66, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 27, 5, 0);
        pnlDataLocation.add(lblDataLocation, gridBagConstraints);

        datalocationGroup.add(radRemoteDatabase);
        radRemoteDatabase.setText("Remote server");
        radRemoteDatabase.setPreferredSize(new java.awt.Dimension(97, 20));
        radRemoteDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radRemoteDatabaseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        pnlDataLocation.add(radRemoteDatabase, gridBagConstraints);
        radRemoteDatabase.getAccessibleContext().setAccessibleName("Remote database (the user provides the JDBC connection)");

        datalocationGroup.add(radInMemoryDatabase);
        radInMemoryDatabase.setSelected(true);
        radInMemoryDatabase.setText("In-memory");
        radInMemoryDatabase.setPreferredSize(new java.awt.Dimension(97, 20));
        radInMemoryDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radInMemoryDatabaseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        pnlDataLocation.add(radInMemoryDatabase, gridBagConstraints);
        radInMemoryDatabase.getAccessibleContext().setAccessibleName("In-memory database (i.e., the system will obtain the ABox from locations below)");

        pnlClassicMode.add(pnlDataLocation);

        pnlABoxSource.setMinimumSize(new java.awt.Dimension(480, 90));
        pnlABoxSource.setPreferredSize(new java.awt.Dimension(470, 35));

        lblDataSource.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDataSource.setText("(3) Data source(s):");
        lblDataSource.setPreferredSize(new java.awt.Dimension(98, 14));
        pnlABoxSource.add(lblDataSource);

        chkObtainFromOntology.setSelected(true);
        chkObtainFromOntology.setText("From the active ontology.");
        chkObtainFromOntology.setPreferredSize(new java.awt.Dimension(150, 23));
        chkObtainFromOntology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkObtainFromOntologyActionPerformed(evt);
            }
        });
        pnlABoxSource.add(chkObtainFromOntology);

        chkObtainFromMappings.setText("From the active OBDA model.");
        chkObtainFromMappings.setPreferredSize(new java.awt.Dimension(168, 23));
        chkObtainFromMappings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkObtainFromMappingsActionPerformed(evt);
            }
        });
        pnlABoxSource.add(chkObtainFromMappings);

        pnlClassicMode.add(pnlABoxSource);

        pnlMappingOptions.add(pnlClassicMode);

        pnlABoxConfiguration.add(pnlMappingOptions, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 6, 7, 6);
        pnlTWConfiguration.add(pnlABoxConfiguration, gridBagConstraints);

        add(pnlTWConfiguration, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTechniqueWrapperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTechniqueWrapperActionPerformed
        // Does nothing because we have only one TW!
    }//GEN-LAST:event_cmbTechniqueWrapperActionPerformed

    private void cmbReformulationMethodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbReformulationMethodsActionPerformed
        javax.swing.JComboBox cb = (javax.swing.JComboBox) evt.getSource();
        String optValue = (String) cb.getSelectedItem();
        if (optValue.equals(QuestConstants.PERFECTREFORMULATION)) {
            preference.setCurrentValueOf(QuestPreferences.REFORMULATION_TECHNIQUE, QuestConstants.PERFECTREFORMULATION);
        }
        else {
            preference.setCurrentValueOf(QuestPreferences.REFORMULATION_TECHNIQUE, QuestConstants.UCQBASED);
        }
    }//GEN-LAST:event_cmbReformulationMethodsActionPerformed

private void radRemoteDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radRemoteDatabaseActionPerformed
//    preference.setCurrentValueOf(ReformulationPlatformPreferences.DATA_LOCATION, QuestConstants.PROVIDED);
}//GEN-LAST:event_radRemoteDatabaseActionPerformed

private void radVirtualObdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radVirtualObdaActionPerformed
    virtualModeSelected();
    preference.setCurrentValueOf(QuestPreferences.ABOX_MODE, QuestConstants.VIRTUAL);
}//GEN-LAST:event_radVirtualObdaActionPerformed

private void chkOptimizeEquivalencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkOptimizeEquivalencesActionPerformed
    if (chkOptimizeEquivalences.isSelected()) {
        preference.setCurrentValueOf(QuestPreferences.OPTIMIZE_EQUIVALENCES, "true");
    }
    else {
        preference.setCurrentValueOf(QuestPreferences.OPTIMIZE_EQUIVALENCES, "false");
    }
}//GEN-LAST:event_chkOptimizeEquivalencesActionPerformed

private void radClassicObdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radClassicObdaActionPerformed
    classicModeSelected();
    preference.setCurrentValueOf(QuestPreferences.ABOX_MODE, QuestConstants.CLASSIC);
    preference.setCurrentValueOf(QuestPreferences.DBTYPE, QuestConstants.SEMANTIC);
//    preference.setCurrentValueOf(ReformulationPlatformPreferences.DATA_LOCATION, QuestConstants.INMEMORY);
}//GEN-LAST:event_radClassicObdaActionPerformed

private void radDirectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radDirectActionPerformed
    preference.setCurrentValueOf(QuestPreferences.DBTYPE, QuestConstants.DIRECT);
}//GEN-LAST:event_radDirectActionPerformed

private void radUniversalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radUniversalActionPerformed
    preference.setCurrentValueOf(QuestPreferences.DBTYPE, QuestConstants.UNIVERSAL);
}//GEN-LAST:event_radUniversalActionPerformed

private void radSemanticIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radSemanticIndexActionPerformed
    preference.setCurrentValueOf(QuestPreferences.DBTYPE, QuestConstants.SEMANTIC);
}//GEN-LAST:event_radSemanticIndexActionPerformed

private void radInMemoryDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radInMemoryDatabaseActionPerformed
//    preference.setCurrentValueOf(ReformulationPlatformPreferences.DATA_LOCATION, QuestConstants.INMEMORY);
}//GEN-LAST:event_radInMemoryDatabaseActionPerformed

private void chkObtainFromOntologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkObtainFromOntologyActionPerformed
    if (chkObtainFromOntology.isSelected()) {
        preference.setCurrentValueOf(QuestPreferences.OBTAIN_FROM_ONTOLOGY, "true");
    }
    else {
        preference.setCurrentValueOf(QuestPreferences.OBTAIN_FROM_ONTOLOGY, "false");
    }
}//GEN-LAST:event_chkObtainFromOntologyActionPerformed

private void chkObtainFromMappingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkObtainFromMappingsActionPerformed
    if (chkObtainFromMappings.isSelected()) {
        preference.setCurrentValueOf(QuestPreferences.OBTAIN_FROM_MAPPINGS, "true");
    }
    else {
        preference.setCurrentValueOf(QuestPreferences.OBTAIN_FROM_MAPPINGS, "false");
    }
}//GEN-LAST:event_chkObtainFromMappingsActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup AboxMode;
    private javax.swing.JCheckBox chkObtainFromMappings;
    private javax.swing.JCheckBox chkObtainFromOntology;
    private javax.swing.JCheckBox chkOptimizeEquivalences;
    private javax.swing.JComboBox cmbReformulationMethods;
    private javax.swing.JComboBox cmbTechniqueWrapper;
    private javax.swing.ButtonGroup datalocationGroup;
    private javax.swing.JLabel lblClassicModeInfo;
    private javax.swing.JLabel lblDataLocation;
    private javax.swing.JLabel lblDataSource;
    private javax.swing.JLabel lblDataStrategy;
    private javax.swing.JLabel lblReformulationTechnique;
    private javax.swing.JLabel lblTechniqueWrapper;
    private javax.swing.JLabel lblVirtualModeInfo;
    private javax.swing.ButtonGroup mapper;
    private javax.swing.ButtonGroup mappingMode;
    private javax.swing.JPanel pnlABoxConfiguration;
    private javax.swing.JPanel pnlABoxSource;
    private javax.swing.JPanel pnlClassicMode;
    private javax.swing.JPanel pnlClassicalModeInfo;
    private javax.swing.JPanel pnlDataLocation;
    private javax.swing.JPanel pnlDatabaseType;
    private javax.swing.JPanel pnlMappingOptions;
    private javax.swing.JPanel pnlPadding;
    private javax.swing.JPanel pnlReformulationMethods;
    private javax.swing.JPanel pnlReformulationOption;
    private javax.swing.JPanel pnlReformulationTechnique;
    private javax.swing.JPanel pnlTWConfiguration;
    private javax.swing.JPanel pnlTWOption;
    private javax.swing.JPanel pnlVirtualMode;
    private javax.swing.JRadioButton radClassicObda;
    private javax.swing.JRadioButton radDirect;
    private javax.swing.JRadioButton radInMemoryDatabase;
    private javax.swing.JRadioButton radRemoteDatabase;
    private javax.swing.JRadioButton radSemanticIndex;
    private javax.swing.JRadioButton radUniversal;
    private javax.swing.JRadioButton radVirtualObda;
    // End of variables declaration//GEN-END:variables
}
