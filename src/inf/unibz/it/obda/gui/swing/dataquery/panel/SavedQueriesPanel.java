/***
 * Copyright (c) 2008, Mariano Rodriguez-Muro.
 * All rights reserved.
 *
 * The OBDA-API is licensed under the terms of the Lesser General Public
 * License v.3 (see OBDAAPI_LICENSE.txt for details). The components of this
 * work include:
 * 
 * a) The OBDA-API developed by the author and licensed under the LGPL; and, 
 * b) third-party components licensed under terms that may be different from 
 *   those of the LGPL.  Information about such licenses can be found in the 
 *   file named OBDAAPI_3DPARTY-LICENSES.txt.
 */

package inf.unibz.it.obda.gui.swing.dataquery.panel;

import inf.unibz.it.obda.api.controller.QueryController;
import inf.unibz.it.obda.api.controller.QueryControllerListener;
import inf.unibz.it.obda.gui.IconLoader;
import inf.unibz.it.obda.gui.swing.querycontroller.tree.QueryGroupTreeElement;
import inf.unibz.it.obda.gui.swing.querycontroller.tree.QueryTreeElement;
import inf.unibz.it.obda.gui.swing.querycontroller.tree.TreeElement;

import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

//import edu.stanford.smi.protege.resource.Icons;

/**
 * GUI for Managing queries.
 * 
 * 
 * @author mariano
 */
public class SavedQueriesPanel extends javax.swing.JPanel implements QueryControllerListener {

	// private static final long serialVersionUID = 6920100822784727963L;
	public Vector<SavedQueriesPanelListener>	listeners;
	
	private QueryController queryController = null;

	/** Creates new form SavedQueriesPanel */
	public SavedQueriesPanel(QueryController queryController) {
		
		this.queryController = queryController;
		
		initComponents();

		listeners = new Vector<SavedQueriesPanelListener>();

		//OBDAPluginController obdac = OBDAPluginController.getCurrentInstance();
//		DefaultMutableTreeNode root = null;
//		if (obdac.getCurrentProject() != null)
//			root = new DefaultMutableTreeNode(obdac.getCurrentProject().getName());
//		else
//			root = new DefaultMutableTreeNode("");
//		QueryControllerTreeModel savedqueriesmodel = new QueryControllerTreeModel(root, qc);
		DefaultMutableTreeNode root = (DefaultMutableTreeNode)this.queryController.getTreeModel().getRoot();
		treeSavedQueries.setModel(this.queryController.getTreeModel());
		treeSavedQueries.setCellRenderer(new SavedQueriesTreeCellRenderer());
		treeSavedQueries.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		treeSavedQueries.expandPath(new TreePath(root.getPath()));

		// Keep this in this position to guarantee the proper order for calling
		// of the listeners
		this.queryController.addListener(this);

		treeSavedQueries.addTreeSelectionListener(new TreeSelectionListener() {

			public void valueChanged(TreeSelectionEvent e) {
				TreePath currentSelection = e.getPath();
				DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) (currentSelection.getLastPathComponent());
				if (currentNode instanceof QueryTreeElement) {
					QueryTreeElement current_query = (QueryTreeElement) currentNode;
					fireQueryChanged(current_query.getQuery());
				}

			}

		});
	}

	public void addQueryManagerListener(SavedQueriesPanelListener listener) {
		if (listener == null)
			return;
		if (listeners.contains(listener))
			return;
		listeners.add(listener);
	}
	
	public void removeQueryManagerListener(SavedQueriesPanelListener listener) {
		if (listener == null)
			return;
		if (listeners.contains(listener))
			listeners.remove(listener);
		
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// ">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		panel_saved_queries = new javax.swing.JPanel();
		scroll_saved_queries = new javax.swing.JScrollPane();
		treeSavedQueries = new javax.swing.JTree();
		panel_saved_queries_header = new javax.swing.JPanel();
		lavel_saved_queries = new javax.swing.JLabel();
		removeQueryButton = new javax.swing.JButton();

		setLayout(new java.awt.BorderLayout());

		panel_saved_queries.setLayout(new java.awt.BorderLayout());

		panel_saved_queries.setMinimumSize(new java.awt.Dimension(200, 50));
		scroll_saved_queries.setMinimumSize(new java.awt.Dimension(400, 200));
		scroll_saved_queries.setOpaque(false);
		scroll_saved_queries.setPreferredSize(new java.awt.Dimension(300, 200));
		treeSavedQueries.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		treeSavedQueries.setForeground(new java.awt.Color(51, 51, 51));
		treeSavedQueries.setMaximumSize(new java.awt.Dimension(5000, 5000));
		treeSavedQueries.setRootVisible(false);
		scroll_saved_queries.setViewportView(treeSavedQueries);

		panel_saved_queries.add(scroll_saved_queries, java.awt.BorderLayout.CENTER);

		panel_saved_queries_header.setLayout(new java.awt.GridBagLayout());

		lavel_saved_queries.setFont(new java.awt.Font("Arial", 1, 11));
		lavel_saved_queries.setForeground(new java.awt.Color(153, 153, 153));
		lavel_saved_queries.setText("  Saved queries:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.5;
		panel_saved_queries_header.add(lavel_saved_queries, gridBagConstraints);

		removeQueryButton.setIcon(IconLoader.getImageIcon("images/minus.png"));
		removeQueryButton.setToolTipText("Remove the selected datasource");
		removeQueryButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		removeQueryButton.setContentAreaFilled(false);
		removeQueryButton.setIconTextGap(0);
		removeQueryButton.setMaximumSize(new java.awt.Dimension(25, 25));
		removeQueryButton.setMinimumSize(new java.awt.Dimension(25, 25));
		removeQueryButton.setPreferredSize(new java.awt.Dimension(25, 25));
		removeQueryButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeQueryButtonActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		panel_saved_queries_header.add(removeQueryButton, gridBagConstraints);

		panel_saved_queries.add(panel_saved_queries_header, java.awt.BorderLayout.NORTH);

		add(panel_saved_queries, java.awt.BorderLayout.CENTER);

	}// </editor-fold>//GEN-END:initComponents

	private void removeQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeQueryButtonActionPerformed
		TreePath selected_path = treeSavedQueries.getSelectionPath();
		if (selected_path == null)
			return;

		if (JOptionPane.showConfirmDialog(this, "This will delete the selected query. \n Continue? ", "Delete confirmation",
				JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.CANCEL_OPTION) {
			return;
		}

		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selected_path.getLastPathComponent();
		if (node instanceof TreeElement) {
			TreeElement element = (TreeElement) node;
			QueryController qc = this.queryController;
			if (node instanceof QueryTreeElement) {
				qc.removeQuery(element.getID());
			} else if (node instanceof QueryGroupTreeElement) {
				qc.removeGroup(element.getID());
			}

		}
	}// GEN-LAST:event_removeQueryButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel		lavel_saved_queries;
	private javax.swing.JPanel		panel_saved_queries;
	private javax.swing.JPanel		panel_saved_queries_header;
	private javax.swing.JButton		removeQueryButton;
	private javax.swing.JScrollPane	scroll_saved_queries;
	private javax.swing.JTree		treeSavedQueries;

	// End of variables declaration//GEN-END:variables

	public void fireQueryChanged(String newquery) {
		for (SavedQueriesPanelListener listener : listeners) {
			listener.selectedQuerychanged(newquery);
		}
	}

	public void elementAdded(TreeElement element) {
		treeSavedQueries.requestFocus();
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) element.getParent();
		treeSavedQueries.expandPath(new TreePath(node.getPath()));
		treeSavedQueries.setSelectionPath(new TreePath(((DefaultMutableTreeNode) element).getPath()));
		treeSavedQueries.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) element).getPath()));

	}

	public void elementAdded(QueryTreeElement query, QueryGroupTreeElement group) {
		treeSavedQueries.requestFocus();
		treeSavedQueries.setSelectionPath(new TreePath(query.getPath()));
		treeSavedQueries.expandPath(new TreePath(group.getPath()));
		treeSavedQueries.scrollPathToVisible(new TreePath(query.getPath()));

	}

	public void elementRemoved(TreeElement element) {

	}

	public void elementRemoved(QueryTreeElement query, QueryGroupTreeElement group) {

	}

}
