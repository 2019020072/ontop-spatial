/***
 * Copyright (c) 2008, Mariano Rodriguez-Muro. All rights reserved.
 * 
 * The OBDA-API is licensed under the terms of the Lesser General Public License
 * v.3 (see OBDAAPI_LICENSE.txt for details). The components of this work
 * include:
 * 
 * a) The OBDA-API developed by the author and licensed under the LGPL; and, b)
 * third-party components licensed under terms that may be different from those
 * of the LGPL. Information about such licenses can be found in the file named
 * OBDAAPI_3DPARTY-LICENSES.txt.
 */
package it.unibz.krdb.obda.gui.swing.panel;

import it.unibz.krdb.obda.gui.swing.IconLoader;
import it.unibz.krdb.obda.gui.swing.OBDADataQueryAction;
import it.unibz.krdb.obda.gui.swing.utils.DialogUtils;
import it.unibz.krdb.obda.gui.swing.utils.SPARQLQueryStyledDocument;
import it.unibz.krdb.obda.model.OBDAModel;
import it.unibz.krdb.obda.querymanager.QueryController;
import it.unibz.krdb.obda.utils.OBDAPreferenceChangeListener;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import javax.swing.text.StyleContext;

/**
 * Creates a new panel to execute queries. Remember to execute the
 * setResultsPanel function to indicate where to display the results.
 */
public class QueryInterfacePanel extends JPanel implements SavedQueriesPanelListener, 
		TableModelListener, OBDAPreferenceChangeListener {

	/**
	 * Variable currentGroup is the group's id to which belongs the selected
	 * query Variable currentId is the query's id that is selected
	 */
	private static final long serialVersionUID = -5902798157183352944L;
	
	private SPARQLQueryStyledDocument styledDocument;
	
	private OBDADataQueryAction executeUCQAction;
	private OBDADataQueryAction executeEQLAction;
	private OBDADataQueryAction retrieveUCQExpansionAction;
	private OBDADataQueryAction retrieveUCQUnfoldingAction;
	private OBDADataQueryAction retrieveEQLUnfoldingAction;
	
	private OBDAModel apic;

	private QueryController qc;
	
	private double execTime = 0;
	
	private String currentGroup = "";  // default value
	private String currentId = "";  // default value
	
	/** 
	 * Creates new form QueryInterfacePanel
	 */
	public QueryInterfacePanel(OBDAModel apic, QueryController qc) {
		
		this.qc = qc;
		this.apic = apic;
		
		initComponents();

		StyleContext style = new StyleContext();
		styledDocument = new SPARQLQueryStyledDocument(style);

		queryTextPane.setDocument(styledDocument);
		queryTextPane.setBackground(Color.WHITE);
		queryTextPane.setCaretColor(Color.BLACK);
		queryTextPane.addKeyListener(new CTRLEnterKeyListener());
	}

	private class CTRLEnterKeyListener implements KeyListener {
		@Override
		public void keyTyped(KeyEvent e) {
		}
		@Override
		public void keyPressed(KeyEvent e) {
			if ((e.getModifiers() == KeyEvent.CTRL_MASK && e.getKeyCode() == KeyEvent.VK_ENTER)) {
				cmdExecuteQueryActionPerformed(null);
			}
		}
		@Override
		public void keyReleased(KeyEvent e) {
		}
	}

	public void setOBDAModel(OBDAModel api) {
		this.apic = api;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        eqlPopupMenu = new javax.swing.JPopupMenu();
        getEQLSQLExpansion = new javax.swing.JMenuItem();
        sparqlPopupMenu = new javax.swing.JPopupMenu();
        getSPARQLExpansion = new javax.swing.JMenuItem();
        getSPARQLSQLExpansion = new javax.swing.JMenuItem();
        pnlQueryButtons = new javax.swing.JPanel();
        pnlExecutionInfo = new javax.swing.JPanel();
        lblExecutionInfo = new javax.swing.JLabel();
        chkShowShortURI = new javax.swing.JCheckBox();
        cmdAttachPrefix = new javax.swing.JButton();
        cmdExecuteQuery = new javax.swing.JButton();
        cmdSaveChanges = new javax.swing.JButton();
        pnlQueryEditor = new javax.swing.JPanel();
        jLabelHeader = new javax.swing.JLabel();
        jScrollQueryPane = new javax.swing.JScrollPane();
        queryTextPane = new javax.swing.JTextPane();

        getEQLSQLExpansion.setText("Get SQL for EQL query...");
        getEQLSQLExpansion.setEnabled(false);
        getEQLSQLExpansion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getEQLSQLExpansionActionPerformed(evt);
            }
        });
        eqlPopupMenu.add(getEQLSQLExpansion);

        sparqlPopupMenu.setComponentPopupMenu(sparqlPopupMenu);

        getSPARQLExpansion.setText("Get expansion this UCQ...");
        getSPARQLExpansion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSPARQLExpansionActionPerformed(evt);
            }
        });
        sparqlPopupMenu.add(getSPARQLExpansion);

        getSPARQLSQLExpansion.setText("Get expanded/unfolded query for this UCQ...");
        getSPARQLSQLExpansion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSPARQLSQLExpansionActionPerformed(evt);
            }
        });
        sparqlPopupMenu.add(getSPARQLSQLExpansion);

        setLayout(new java.awt.GridBagLayout());

        pnlQueryButtons.setPreferredSize(new java.awt.Dimension(445, 30));
        pnlQueryButtons.setLayout(new java.awt.GridBagLayout());

        pnlExecutionInfo.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        pnlExecutionInfo.add(lblExecutionInfo, gridBagConstraints);

        chkShowShortURI.setText("show short URIs");
        chkShowShortURI.setPreferredSize(new java.awt.Dimension(120, 23));
        pnlExecutionInfo.add(chkShowShortURI, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        pnlQueryButtons.add(pnlExecutionInfo, gridBagConstraints);

        cmdAttachPrefix.setIcon(IconLoader.getImageIcon("images/attach.png"));
        cmdAttachPrefix.setText("Attach Prefixes");
        cmdAttachPrefix.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cmdAttachPrefix.setContentAreaFilled(false);
        cmdAttachPrefix.setIconTextGap(5);
        cmdAttachPrefix.setPreferredSize(new java.awt.Dimension(112, 26));
        cmdAttachPrefix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAttachPrefixActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlQueryButtons.add(cmdAttachPrefix, gridBagConstraints);

        cmdExecuteQuery.setIcon(IconLoader.getImageIcon("images/execute.png"));
        cmdExecuteQuery.setMnemonic('x');
        cmdExecuteQuery.setText("Execute");
        cmdExecuteQuery.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cmdExecuteQuery.setContentAreaFilled(false);
        cmdExecuteQuery.setIconTextGap(5);
        cmdExecuteQuery.setPreferredSize(new java.awt.Dimension(82, 26));
        cmdExecuteQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExecuteQueryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlQueryButtons.add(cmdExecuteQuery, gridBagConstraints);

        cmdSaveChanges.setIcon(IconLoader.getImageIcon("images/save.png"));
        cmdSaveChanges.setText("Save Changes");
        cmdSaveChanges.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cmdSaveChanges.setContentAreaFilled(false);
        cmdSaveChanges.setIconTextGap(5);
        cmdSaveChanges.setPreferredSize(new java.awt.Dimension(112, 26));
        cmdSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveChangesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        pnlQueryButtons.add(cmdSaveChanges, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(pnlQueryButtons, gridBagConstraints);

        pnlQueryEditor.setLayout(new java.awt.BorderLayout());

        jLabelHeader.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabelHeader.setForeground(new java.awt.Color(153, 153, 153));
        jLabelHeader.setText("  Query Editor");
        jLabelHeader.setMaximumSize(new java.awt.Dimension(68, 18));
        jLabelHeader.setMinimumSize(new java.awt.Dimension(68, 18));
        jLabelHeader.setPreferredSize(new java.awt.Dimension(68, 18));
        pnlQueryEditor.add(jLabelHeader, java.awt.BorderLayout.NORTH);

        queryTextPane.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        queryTextPane.setComponentPopupMenu(sparqlPopupMenu);
        jScrollQueryPane.setViewportView(queryTextPane);

        pnlQueryEditor.add(jScrollQueryPane, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(pnlQueryEditor, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

	private void getEQLSQLExpansionActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_getEQLSQLExpansionActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_getEQLSQLExpansionActionPerformed

	private void getSPARQLExpansionActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_getSPARQLExpansionActionPerformed
		Thread queryRunnerThread = new Thread(new Runnable() {
			@Override
			public void run() {
				OBDADataQueryAction action = QueryInterfacePanel.this.getRetrieveUCQExpansionAction();
				action.run(queryTextPane.getText(), null);
			}
		});
		queryRunnerThread.start();
	}// GEN-LAST:event_getSPARQLExpansionActionPerformed

	private void getSPARQLSQLExpansionActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_getSPARQLSQLExpansionActionPerformed
		Thread queryRunnerThread = new Thread(new Runnable() {
			@Override
			public void run() {
				OBDADataQueryAction action = QueryInterfacePanel.this.getRetrieveUCQUnfoldingAction();
				action.run(queryTextPane.getText(), null);
			}
		});
		queryRunnerThread.start();
	}// GEN-LAST:event_getSPARQLSQLExpansionActionPerformed

	private void cmdAttachPrefixActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonAdvancedPropertiesActionPerformed
		SelectPrefixPanel dialog = new SelectPrefixPanel(apic.getPrefixManager(), queryTextPane);
		dialog.show();
	}// GEN-LAST:event_buttonAdvancedPropertiesActionPerformed

	private void cmdExecuteQueryActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonExecuteActionPerformed
		final QueryInterfacePanel copyInstance = this;
		try {
			// TODO Handle this such that there is a listener checking the
			// progress of the execution
			Thread queryRunnerThread = new Thread(new Runnable() {
				@Override
				public void run() {
					OBDADataQueryAction action = QueryInterfacePanel.this.getExecuteUCQAction();
					action.run(queryTextPane.getText(), copyInstance);

					execTime = action.getExecutionTime();
					int rows = action.getNumberOfRows();
					updateStatus(rows);
				};
			});
			queryRunnerThread.start();
		} catch (Exception e) {
			DialogUtils.showQuickErrorDialog(null, e);
		}
	}// GEN-LAST:event_buttonExecuteActionPerformed

	private void cmdSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonSaveActionPerformed
		final String query = queryTextPane.getText();
		if (!currentId.isEmpty()) {
			if (!currentGroup.isEmpty()) {
				qc.addQuery(query, currentId, currentGroup);
			} else {
				qc.addQuery(query, currentId);
			}
		} else {
			JOptionPane.showMessageDialog(this,
					"Please select first the query node that you would like to update",
					"Warning",
					JOptionPane.WARNING_MESSAGE);
		}		
	}// GEN-LAST:event_buttonSaveActionPerformed

	public void selectedQuerychanged(String new_group, String new_query, String new_id) {
		queryTextPane.setText(new_query);
		currentGroup = new_group;
		currentId = new_id;
	}

	public void setExecuteUCQAction(OBDADataQueryAction executeUCQAction) {
		this.executeUCQAction = executeUCQAction;
	}

	public OBDADataQueryAction getExecuteUCQAction() {
		return executeUCQAction;
	}

	public void setExecuteEQLAction(OBDADataQueryAction executeEQLAction) {
		this.executeEQLAction = executeEQLAction;
	}

	public OBDADataQueryAction getExecuteEQLAction() {
		return executeEQLAction;
	}

	public void setRetrieveUCQExpansionAction(OBDADataQueryAction retrieveUCQExpansionAction) {
		this.retrieveUCQExpansionAction = retrieveUCQExpansionAction;
	}

	public OBDADataQueryAction getRetrieveUCQExpansionAction() {
		return retrieveUCQExpansionAction;
	}

	public void setRetrieveUCQUnfoldingAction(OBDADataQueryAction retrieveUCQUnfoldingAction) {
		this.retrieveUCQUnfoldingAction = retrieveUCQUnfoldingAction;
	}

	public OBDADataQueryAction getRetrieveUCQUnfoldingAction() {
		return retrieveUCQUnfoldingAction;
	}

	public void setRetrieveEQLUnfoldingAction(OBDADataQueryAction retrieveEQLUnfoldingAction) {
		this.retrieveEQLUnfoldingAction = retrieveEQLUnfoldingAction;
	}

	public OBDADataQueryAction getRetrieveEQLUnfoldingAction() {
		return retrieveEQLUnfoldingAction;
	}

	public void updateStatus(int rows) {
		Double d = Double.valueOf(execTime / 1000);
		String s = "Execution time: " + d + " sec     Number of tuples retrieved: " + rows;
		lblExecutionInfo.setText(s);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkShowShortURI;
    private javax.swing.JButton cmdAttachPrefix;
    private javax.swing.JButton cmdExecuteQuery;
    private javax.swing.JButton cmdSaveChanges;
    private javax.swing.JPopupMenu eqlPopupMenu;
    private javax.swing.JMenuItem getEQLSQLExpansion;
    private javax.swing.JMenuItem getSPARQLExpansion;
    private javax.swing.JMenuItem getSPARQLSQLExpansion;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JScrollPane jScrollQueryPane;
    private javax.swing.JLabel lblExecutionInfo;
    private javax.swing.JPanel pnlExecutionInfo;
    private javax.swing.JPanel pnlQueryButtons;
    private javax.swing.JPanel pnlQueryEditor;
    private javax.swing.JTextPane queryTextPane;
    private javax.swing.JPopupMenu sparqlPopupMenu;
    // End of variables declaration//GEN-END:variables

	public void tableChanged(TableModelEvent e) {
		Double d = Double.valueOf(execTime / 1000);
		int rows = ((TableModel) e.getSource()).getRowCount();
		String s = "Execution time: " + d + " sec     Number of tuples retrieved: " + rows;
		lblExecutionInfo.setText(s);
	}

	public boolean isShortURISelect() {
		return chkShowShortURI.isSelected();
	}

	public String getQuery() {
		return queryTextPane.getText();
	}

	@Override
	public void preferenceChanged() {
		String query = queryTextPane.getText();
		queryTextPane.setText(query);
	}
}
