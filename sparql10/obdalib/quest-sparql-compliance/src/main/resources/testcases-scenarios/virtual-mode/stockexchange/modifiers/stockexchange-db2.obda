[PrefixDeclaration]
xsd:		http://www.w3.org/2001/XMLSchema#
owl:		http://www.w3.org/2002/07/owl#
owl2xml:		http://www.w3.org/2006/12/owl2-xml#
:		http://www.owl-ontologies.com/Ontology1207768242.owl#
rdf:		http://www.w3.org/1999/02/22-rdf-syntax-ns#
rdfs:		http://www.w3.org/2000/01/rdf-schema#

[ClassDeclaration] @collection [[
owl:Thing, :Offer, :PhysicalPerson, :Transaction, :Investor, :StockTrader, :LegalPerson, :FinantialInstrument, :Person, :Stock
:Dealer, :StockExchangeMember, :StockBroker, :StockExchangeList, :Acquisition, :Company, :Address, :Trader
]]

[ObjectPropertyDeclaration] @collection [[
:isTradedIn, :usesBroker, :inverse_test2, :isExecutedFor, :listsStock, :test1, :isExecutedBy, :isListedIn, :test2, :hasAddress
:inverseofhasAddress, :inverse_of_test1, :involvesInstrument, :tradesOnBehalfOf, :belongsToCompany, :hasStock
]]

[DataPropertyDeclaration] @collection [[
:inCity, :inCountry, :inStreet, :stockDescription, :amountOfShares, :amountOfTransaction, :hasNumber, :typeOfShares, :firstName, :marketShares
:transactionID, :ssn, :personID, :companyName, :netWorth, :inState, :listdate, :financialInstrumentID, :addressID, :transactionDate
:membershipDate, :dateOfBirth, :lastName
]]

[SourceDeclaration]
sourceUri	RandBStockExchange
connectionUrl jdbc:db2://10.10.160.28:50000/sample
username	db2inst1
password	fish
driverClass	com.ibm.db2.jcc.DB2Driver

[MappingDeclaration] @collection [[
mappingId	mapping-addresses
target		:getAddressObj($ID) a :Address; :addressID $ID; :inStreet $STREET; :hasNumber $NUMBER; :inCity $CITY; :inState $STATE; :inCountry $COUNTRY . 
source		select ID, STREET, NUMBER, CITY, STATE, COUNTRY from ADDRESS

mappingId	mapping-brokers
target		:getPersonObj($ID) a :StockBroker; :firstName $NAME; :lastName $LASTNAME; :dateOfBirth $DATEOFBIRTH; :ssn $SSN . 
source		select ID, NAME, LASTNAME, DATEOFBIRTH, SSN from BROKER

mappingId	mapping-broker-address
target		:getPersonObj($ID) :hasAddress :getAddressObj($ADDRESSID) . 
source		select ID, ADDRESSID from BROKER

mappingId	mapping-investors
target		:getPersonObj($ID) a :Investor; :firstName $NAME; :lastName $LASTNAME; :dateOfBirth $DATEOFBIRTH; :ssn $SSN . 
source		select ID, NAME, LASTNAME, DATEOFBIRTH, SSN from CLIENT

mappingId	mapping-investor-address
target		:getPersonObj($ID) :hasAddress :getAddressObj($ADDRESSID) . 
source		select ID, NAME, LASTNAME, ADDRESSID from CLIENT

mappingId	mapping-companies
target		:getCompanyObj($ID) a :Company; :companyName $NAME; :marketShares $MARKETSHARES; :netWorth $NETWORTH . 
source		select ID, NAME, MARKETSHARES, NETWORTH from COMPANY

mappingId	mapping-company-addresses
target		:getCompanyObj($ID) :hasAddress :getAddressObj($ADDRESSID) . 
source		select ID, ADDRESSID from COMPANY

mappingId	mapping-stocks
target		:getStockObj($ID) a :Stock; :financialInstrumentID $ID; :amountOfShares $NUMBEROFSHARES; :typeOfShares $SHARETYPE; :stockDescription $DESCRIPTION@en-us . 
source		select ID, NUMBEROFSHARES, SHARETYPE, DESCRIPTION from STOCKINFORMATION

mappingId	mapping-stockbooks
target		:getStockBookObj($DATE) a :StockExchangeList; :listdate $DATE . 
source		select distinct DATE from STOCKBOOKLIST 

mappingId	mapping-tradesOnBehalfOf-physical
target		:getPersonObj($BROKERID) :tradesOnBehalfOf :getPersonObj($CLIENTID) . 
source		select BROKERID, CLIENTID from BROKERWORKSFOR where CLIENTID IS NOT NULL

mappingId	mapping-tradesOnBehalfOf-legal
target		:getPersonObj($BROKERID) :tradesOnBehalfOf :getCompanyObj($COMPANYID) . 
source		select BROKERID, COMPANYID from BROKERWORKSFOR where COMPANYID IS NOT NULL

mappingId	mapping-transactions
target		:getTransactionObj($ID) a :Transaction; :transactionID $ID; :transactionDate $DATE; :amountOfTransaction $AMOUNT . 
source		select ID, DATE, AMOUNT from TRANSACTION

mappingId	mapping-transaction-roles-persons
target		:getTransactionObj($ID) :isExecutedBy :getPersonObj($BROKERID); :isExecutedFor :getPersonObj($FORCLIENTID); :involvesInstrument :getStockObj($STOCKID) . 
source		select ID, BROKERID, FORCLIENTID, STOCKID from TRANSACTION where FORCLIENTID IS NOT NULL

mappingId	mapping-transaction-roles-companies
target		:getTransactionObj($ID) :isExecutedBy :getPersonObj($BROKERID); :isExecutedFor :getCompanyObj($FORCOMPANYID); :involvesInstrument :getStockObj($STOCKID) . 
source		select ID, BROKERID, FORCOMPANYID, STOCKID from TRANSACTION where FORCOMPANYID IS NOT NULL

mappingId	mapping-stock-company
target		:getStockObj($ID) :belongsToCompany :getCompanyObj($COMPANYID) . 
source		select ID, COMPANYID from STOCKINFORMATION

mappingId	mapping-stock-listedin
target		:getStockBookObj($DATE) :listsStock :getStockObj($STOCKID) . 
source		select DATE, STOCKID from STOCKBOOKLIST

mappingId	mapping-dealer
target		:getPersonObj($CLIENTID) a :Dealer . 
source		select CLIENTID from BROKER,CLIENT,BROKERWORKSFOR where CLIENT.ID = BROKER.ID and BROKERID=BROKER.ID and CLIENT.ID=CLIENTID

mappingId	mapping-offers
target		:getTransactionObj($ID) a :Offer . 
source		SELECT ID FROM TRANSACTION WHERE TYPE=1
]]

