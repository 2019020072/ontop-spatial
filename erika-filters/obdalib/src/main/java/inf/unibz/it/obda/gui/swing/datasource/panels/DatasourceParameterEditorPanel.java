/***
 * Copyright (c) 2008, Mariano Rodriguez-Muro.
 * All rights reserved.
 *
 * The OBDA-API is licensed under the terms of the Lesser General Public
 * License v.3 (see OBDAAPI_LICENSE.txt for details). The components of this
 * work include:
 * 
 * a) The OBDA-API developed by the author and licensed under the LGPL; and, 
 * b) third-party components licensed under terms that may be different from 
 *   those of the LGPL.  Information about such licenses can be found in the 
 *   file named OBDAAPI_3DPARTY-LICENSES.txt.
 */

package inf.unibz.it.obda.gui.swing.datasource.panels;

import inf.unibz.it.obda.api.controller.DatasourcesController;
import inf.unibz.it.obda.api.controller.DatasourcesControllerListener;
import inf.unibz.it.obda.domain.DataSource;
import inf.unibz.it.obda.rdbmsgav.domain.RDBMSsourceParameterConstants;

import javax.swing.JOptionPane;

/**
 *
 * @author  mariano
 */
public class DatasourceParameterEditorPanel extends javax.swing.JPanel implements DatasourcesControllerListener  {
    
	
    /**
	 * 
	 */
	private static final long	serialVersionUID	= 1L;

	private DatasourcesController dscontroller = null;

	/** Creates new form DatasourceParameterEditorPanel */
    public DatasourceParameterEditorPanel(DatasourcesController dscontroller) {
    	this.dscontroller = dscontroller;
        initComponents();
        //TODO
        this.dscontroller.addDatasourceControllerListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scrollDatasourceParametersBean = new javax.swing.JScrollPane();
        panelDatasourceParametersBean = new javax.swing.JPanel();
        panelDatasourceInfo = new javax.swing.JPanel();
        labelHeaderDatasourceURI = new javax.swing.JLabel();
        labelDatasource = new javax.swing.JLabel();
        labelHeaderDatasourceType = new javax.swing.JLabel();
        labelDSType = new javax.swing.JLabel();
        labelHeaderMappingsType = new javax.swing.JLabel();
        labelMapType = new javax.swing.JLabel();
        panelDataSourceEditor = new javax.swing.JPanel();
        labelID = new javax.swing.JLabel();
        fieldURI = new javax.swing.JTextField();
        labelURL = new javax.swing.JLabel();
        fieldURL = new javax.swing.JTextField();
        labelName = new javax.swing.JLabel();
        fieldDBName = new javax.swing.JTextField();
        labelUsername = new javax.swing.JLabel();
        fieldDBUser = new javax.swing.JTextField();
        labelPassword = new javax.swing.JLabel();
        fieldDBPassword = new javax.swing.JPasswordField();
        labelDriver = new javax.swing.JLabel();
        fieldDBDriver = new javax.swing.JTextField();
        panelPadding = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        scrollDatasourceParametersBean.setBorder(null);
        scrollDatasourceParametersBean.setAutoscrolls(true);
        scrollDatasourceParametersBean.setInheritsPopupMenu(true);

        panelDatasourceParametersBean.setAutoscrolls(true);
        panelDatasourceParametersBean.setMinimumSize(new java.awt.Dimension(200, 350));
        panelDatasourceParametersBean.setPreferredSize(new java.awt.Dimension(200, 350));
        panelDatasourceParametersBean.setLayout(new java.awt.GridBagLayout());

        panelDatasourceInfo.setAutoscrolls(true);
        panelDatasourceInfo.setMaximumSize(new java.awt.Dimension(32767, 23));
        panelDatasourceInfo.setMinimumSize(new java.awt.Dimension(100, 100));
        panelDatasourceInfo.setPreferredSize(new java.awt.Dimension(140, 100));
        panelDatasourceInfo.setLayout(new java.awt.GridBagLayout());

        labelHeaderDatasourceURI.setBackground(new java.awt.Color(153, 153, 153));
        labelHeaderDatasourceURI.setFont(new java.awt.Font("Arial", 1, 11));
        labelHeaderDatasourceURI.setForeground(new java.awt.Color(153, 153, 153));
        labelHeaderDatasourceURI.setText("For datasource:");
        labelHeaderDatasourceURI.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        panelDatasourceInfo.add(labelHeaderDatasourceURI, gridBagConstraints);

        labelDatasource.setFont(new java.awt.Font("Arial", 0, 11));
        labelDatasource.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panelDatasourceInfo.add(labelDatasource, gridBagConstraints);

        labelHeaderDatasourceType.setBackground(new java.awt.Color(153, 153, 153));
        labelHeaderDatasourceType.setFont(new java.awt.Font("Arial", 1, 11));
        labelHeaderDatasourceType.setForeground(new java.awt.Color(153, 153, 153));
        labelHeaderDatasourceType.setText("Type:");
        labelHeaderDatasourceType.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        panelDatasourceInfo.add(labelHeaderDatasourceType, gridBagConstraints);

        labelDSType.setFont(new java.awt.Font("Arial", 0, 11));
        labelDSType.setText("RDBMS");
        labelDSType.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panelDatasourceInfo.add(labelDSType, gridBagConstraints);

        labelHeaderMappingsType.setBackground(new java.awt.Color(153, 153, 153));
        labelHeaderMappingsType.setFont(new java.awt.Font("Arial", 1, 11));
        labelHeaderMappingsType.setForeground(new java.awt.Color(153, 153, 153));
        labelHeaderMappingsType.setText("Mapping Type:");
        labelHeaderMappingsType.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        panelDatasourceInfo.add(labelHeaderMappingsType, gridBagConstraints);

        labelMapType.setFont(new java.awt.Font("Arial", 0, 11));
        labelMapType.setText("Direct Mapping");
        labelMapType.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panelDatasourceInfo.add(labelMapType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelDatasourceParametersBean.add(panelDatasourceInfo, gridBagConstraints);

        panelDataSourceEditor.setAlignmentX(5.0F);
        panelDataSourceEditor.setAlignmentY(5.0F);
        panelDataSourceEditor.setAutoscrolls(true);
        panelDataSourceEditor.setMaximumSize(new java.awt.Dimension(6404444, 34452345));
        panelDataSourceEditor.setMinimumSize(new java.awt.Dimension(200, 100));
        panelDataSourceEditor.setPreferredSize(new java.awt.Dimension(200, 200));
        panelDataSourceEditor.setLayout(new java.awt.GridBagLayout());

        labelID.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        labelID.setForeground(new java.awt.Color(153, 153, 153));
        labelID.setText("  Source ID:");
        labelID.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelDataSourceEditor.add(labelID, gridBagConstraints);

        fieldURI.setEditable(false);
        fieldURI.setMaximumSize(new java.awt.Dimension(25, 2147483647));
        fieldURI.setMinimumSize(new java.awt.Dimension(180, 19));
        fieldURI.setName("somename"); // NOI18N
        fieldURI.setPreferredSize(new java.awt.Dimension(180, 19));
        fieldURI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldChangeHandler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        panelDataSourceEditor.add(fieldURI, gridBagConstraints);

        labelURL.setFont(new java.awt.Font("Arial", 1, 11));
        labelURL.setForeground(new java.awt.Color(153, 153, 153));
        labelURL.setText("  JDBC URL:");
        labelURL.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelDataSourceEditor.add(labelURL, gridBagConstraints);

        fieldURL.setMaximumSize(new java.awt.Dimension(25, 2147483647));
        fieldURL.setMinimumSize(new java.awt.Dimension(180, 19));
        fieldURL.setName("somename"); // NOI18N
        fieldURL.setPreferredSize(new java.awt.Dimension(180, 19));
        fieldURL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldChangeHandler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        panelDataSourceEditor.add(fieldURL, gridBagConstraints);

        labelName.setFont(new java.awt.Font("Arial", 1, 11));
        labelName.setForeground(new java.awt.Color(153, 153, 153));
        labelName.setText("  Database Name:");
        labelName.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelDataSourceEditor.add(labelName, gridBagConstraints);

        fieldDBName.setMaximumSize(new java.awt.Dimension(25, 2147483647));
        fieldDBName.setMinimumSize(new java.awt.Dimension(180, 19));
        fieldDBName.setName("somename"); // NOI18N
        fieldDBName.setPreferredSize(new java.awt.Dimension(180, 19));
        fieldDBName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldChangeHandler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        panelDataSourceEditor.add(fieldDBName, gridBagConstraints);

        labelUsername.setFont(new java.awt.Font("Arial", 1, 11));
        labelUsername.setForeground(new java.awt.Color(153, 153, 153));
        labelUsername.setText("  Database Username:");
        labelUsername.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelDataSourceEditor.add(labelUsername, gridBagConstraints);

        fieldDBUser.setMaximumSize(new java.awt.Dimension(25, 2147483647));
        fieldDBUser.setMinimumSize(new java.awt.Dimension(180, 19));
        fieldDBUser.setName("somename"); // NOI18N
        fieldDBUser.setPreferredSize(new java.awt.Dimension(180, 19));
        fieldDBUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldChangeHandler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        panelDataSourceEditor.add(fieldDBUser, gridBagConstraints);

        labelPassword.setFont(new java.awt.Font("Arial", 1, 11));
        labelPassword.setForeground(new java.awt.Color(153, 153, 153));
        labelPassword.setText("  Database Password:");
        labelPassword.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelDataSourceEditor.add(labelPassword, gridBagConstraints);

        fieldDBPassword.setMaximumSize(new java.awt.Dimension(25, 2147483647));
        fieldDBPassword.setMinimumSize(new java.awt.Dimension(180, 19));
        fieldDBPassword.setName("somename"); // NOI18N
        fieldDBPassword.setPreferredSize(new java.awt.Dimension(180, 19));
        fieldDBPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldChangeHandler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        panelDataSourceEditor.add(fieldDBPassword, gridBagConstraints);

        labelDriver.setFont(new java.awt.Font("Arial", 1, 11));
        labelDriver.setForeground(new java.awt.Color(153, 153, 153));
        labelDriver.setText("  JDBC Driver:");
        labelDriver.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelDataSourceEditor.add(labelDriver, gridBagConstraints);

        fieldDBDriver.setMaximumSize(new java.awt.Dimension(25, 2147483647));
        fieldDBDriver.setMinimumSize(new java.awt.Dimension(180, 19));
        fieldDBDriver.setName("somename"); // NOI18N
        fieldDBDriver.setPreferredSize(new java.awt.Dimension(180, 19));
        fieldDBDriver.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldChangeHandler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        panelDataSourceEditor.add(fieldDBDriver, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelDataSourceEditor.add(panelPadding, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 2.0;
        panelDatasourceParametersBean.add(panelDataSourceEditor, gridBagConstraints);

        scrollDatasourceParametersBean.setViewportView(panelDatasourceParametersBean);

        add(scrollDatasourceParametersBean, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void fieldChangeHandler(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldChangeHandler

		DataSource currentsrc = dscontroller.getCurrentDataSource();
		if (currentsrc == null) {
			JOptionPane.showMessageDialog(this, "Select a data source first");
			return;
		}
//		currentsrc.setUri(fieldURI.getText());
		currentsrc.setParameter(RDBMSsourceParameterConstants.DATABASE_NAME, fieldDBName.getText());
		currentsrc.setParameter(RDBMSsourceParameterConstants.DATABASE_USERNAME, fieldDBUser.getText());
		currentsrc.setParameter(RDBMSsourceParameterConstants.DATABASE_PASSWORD, fieldDBPassword.getText());
		currentsrc.setParameter(RDBMSsourceParameterConstants.DATABASE_DRIVER, fieldDBDriver.getText());
		currentsrc.setParameter(RDBMSsourceParameterConstants.DATABASE_URL, fieldURL.getText());
		
		dscontroller.fireParametersUpdated();
		
		return;
    }//GEN-LAST:event_fieldChangeHandler

        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldDBDriver;
    private javax.swing.JTextField fieldDBName;
    private javax.swing.JPasswordField fieldDBPassword;
    private javax.swing.JTextField fieldDBUser;
    private javax.swing.JTextField fieldURI;
    private javax.swing.JTextField fieldURL;
    private javax.swing.JLabel labelDSType;
    private javax.swing.JLabel labelDatasource;
    private javax.swing.JLabel labelDriver;
    private javax.swing.JLabel labelHeaderDatasourceType;
    private javax.swing.JLabel labelHeaderDatasourceURI;
    private javax.swing.JLabel labelHeaderMappingsType;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelMapType;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelURL;
    private javax.swing.JLabel labelUsername;
    private javax.swing.JPanel panelDataSourceEditor;
    private javax.swing.JPanel panelDatasourceInfo;
    private javax.swing.JPanel panelDatasourceParametersBean;
    private javax.swing.JPanel panelPadding;
    private javax.swing.JScrollPane scrollDatasourceParametersBean;
    // End of variables declaration//GEN-END:variables

    
    public void alldatasourcesDeleted() {
		
	}

	public void currentDatasourceChange(DataSource previousdatasource, DataSource currentsource) {

		if (currentsource == null) {
			labelDSType.setText("");
			labelMapType.setText("");
			labelDatasource.setText("");
			fieldURI.setText("");
			fieldDBDriver.setText("");
			fieldDBName.setText("");
			fieldDBUser.setText("");
			fieldDBPassword.setText("");
			fieldURL.setText("");
			labelDSType.setEnabled(false);
			labelMapType.setEnabled(false);
			labelDatasource.setEnabled(false);
			fieldURI.setEnabled(false);
			fieldDBDriver.setEnabled(false);
			fieldDBName.setEnabled(false);
			fieldDBUser.setEnabled(false);
			fieldDBPassword.setEnabled(false);
			fieldURL.setEnabled(false);
		} else {

			/*******************************************************************
			 * Updating the GUI fields with the sources info
			 * 
			 */
			labelDSType.setText("RDBMS");
			labelMapType.setText("OBDAMappings");
			labelDatasource.setText(currentsource.getName());
			fieldURI.setText(currentsource.getUri());
			fieldDBDriver.setText(currentsource.getParameter(RDBMSsourceParameterConstants.DATABASE_DRIVER));
			fieldDBName.setText(currentsource.getParameter(RDBMSsourceParameterConstants.DATABASE_NAME));
			fieldDBUser.setText(currentsource.getParameter(RDBMSsourceParameterConstants.DATABASE_USERNAME));
			fieldDBPassword.setText(currentsource.getParameter(RDBMSsourceParameterConstants.DATABASE_PASSWORD));
			fieldURL.setText(currentsource.getParameter(RDBMSsourceParameterConstants.DATABASE_URL));
			labelDSType.setEnabled(true);
			labelMapType.setEnabled(true);
			labelDatasource.setEnabled(true);
			fieldURI.setEnabled(true);
			fieldDBDriver.setEnabled(true);
			fieldDBName.setEnabled(true);
			fieldDBUser.setEnabled(true);
			fieldDBPassword.setEnabled(true);
			fieldURL.setEnabled(true);

		}
	}

	public void datasourceAdded(DataSource source) {
		
	}

	public void datasourceDeleted(DataSource source) {
		
	}

	public void datasourceUpdated(String oldname, DataSource currendata) {
		
	}

	@Override
	public void datasourcParametersUpdated() {}
    
}
