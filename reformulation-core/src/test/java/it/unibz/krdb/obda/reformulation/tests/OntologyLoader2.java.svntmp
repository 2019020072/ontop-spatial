package org.obda.reformulation.tests;

import inf.unibz.it.obda.api.controller.QueryController;
import inf.unibz.it.obda.api.controller.QueryControllerEntity;
import inf.unibz.it.obda.api.io.DataManager;
import inf.unibz.it.obda.domain.DataSource;
import inf.unibz.it.obda.domain.OBDAMappingAxiom;
import inf.unibz.it.obda.gui.swing.querycontroller.tree.QueryControllerGroup;
import inf.unibz.it.obda.gui.swing.querycontroller.tree.QueryControllerQuery;
import inf.unibz.it.obda.owlapi.OWLAPIController;
import inf.unibz.it.obda.queryanswering.QueryResultSet;
import inf.unibz.it.obda.queryanswering.Statement;
import inf.unibz.it.obda.rdbmsgav.domain.RDBMSsourceParameterConstants;

import java.io.File;
import java.net.URI;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import org.obda.owlreformulationplatform.preferences.ReformulationPlatformPreferences;
import org.obda.owlrefplatform.core.ComplexMappingSQLGenerator;
import org.obda.owlrefplatform.core.ComplexMappingUnfolder;
import org.obda.owlrefplatform.core.EvaluationEngine;
import org.obda.owlrefplatform.core.JDBCEngine;
import org.obda.owlrefplatform.core.JDBCUtility;
import org.obda.owlrefplatform.core.MappingViewManager;
import org.obda.owlrefplatform.core.OBDAOWLReformulationPlatform;
import org.obda.owlrefplatform.core.OBDAOWLReformulationPlatformFactoryImpl;
import org.obda.owlrefplatform.core.SourceQueryGenerator;
import org.obda.owlrefplatform.core.UnfoldingMechanism;
import org.obda.query.domain.CQIE;
import org.obda.query.domain.DatalogProgram;
import org.obda.query.domain.imp.DatalogProgramImpl;
import org.obda.query.tools.parser.SPARQLDatalogTranslator;
import org.obda.reformulation.dllite.DLRPerfectReformulator;
import org.obda.reformulation.dllite.QueryRewriter;
import org.obda.reformulation.domain.DLLiterOntology;
import org.obda.reformulation.domain.imp.OWLAPITranslator;
import org.semanticweb.owl.apibinding.OWLManager;
import org.semanticweb.owl.model.OWLOntology;
import org.semanticweb.owl.model.OWLOntologyManager;

import com.hp.hpl.jena.query.QueryException;

public class OntologyLoader2 {

	private static String owlfile = null;

	public static void main(String args[]){

		owlfile = args[0];

		OBDAOWLReformulationPlatform reasoner = null;
	    try {

	            // Loading the OWL file
	            OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
	            OWLOntology ontology = manager.loadOntologyFromPhysicalURI((new File(owlfile)).toURI());

	            // Loading the OBDA data (note, the obda file must be in the same folder as the owl file
	            OWLAPIController controller = new OWLAPIController(manager, ontology);
	            controller.loadData(new File(owlfile).toURI());

	            DataManager ioManager = controller.getIOManager();
	            URI obdaUri = ioManager.getOBDAFile(new File(owlfile).toURI());
	            ioManager.loadOBDADataFromURI(obdaUri);

	            // Creating a new instance of a quonto reasoner
	            OBDAOWLReformulationPlatformFactoryImpl factory = new OBDAOWLReformulationPlatformFactoryImpl();
	            factory.setup(manager, "asdf", "asdf");
	            factory.setOBDAController(controller);

	            ReformulationPlatformPreferences pref = new ReformulationPlatformPreferences();
	            ReformulationPlatformPreferences.setDefaultValueOf(ReformulationPlatformPreferences.CREATE_TEST_MAPPINGS, "false");
	            ReformulationPlatformPreferences.setDefaultValueOf(ReformulationPlatformPreferences.USE_INMEMORY_DB, "false");
	            ReformulationPlatformPreferences.setDefaultValueOf(ReformulationPlatformPreferences.UNFOLDING_MECHANMISM, "complex");

	            reasoner = (OBDAOWLReformulationPlatform) factory.createReasoner(manager);
	            reasoner.loadOntologies(manager.getOntologies());
	            reasoner.classify();
	            String prefix = "PREFIX :		<http://www.owl-ontologies.com/Ontology1207768242.owl#> \n" +
	            					"PREFIX onto:		<http://www.owl-ontologies.com/Ontology1207768242.owl#> \n"+
	    						   "PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n" ;
//	    						   "SELECT ?x WHERE { ?x rdf:type onto:Investor }";



	            // Executing the query

	            QueryController queryCon = controller.getQueryController();
	            Vector<QueryControllerEntity> s = queryCon.getElements();
	            Vector<String> queryStrings = new Vector<String>();
	            Iterator<QueryControllerEntity> qit = s.iterator();
	            while(qit.hasNext()){
	            	QueryControllerEntity entity = qit.next();
	            	if(entity instanceof QueryControllerGroup){
	            		QueryControllerGroup group = (QueryControllerGroup) entity;
	            		Vector<QueryControllerQuery> t = group.getQueries();
	            		Iterator<QueryControllerQuery> it = t.iterator();
	            		while(it.hasNext()){
	            			QueryControllerQuery query = it.next();
	            			queryStrings.add(query.getQuery());
	            		}
	            	}else{
	            		QueryControllerQuery query = (QueryControllerQuery) entity;
            			queryStrings.add(query.getQuery());
	            	}
	            }
	            
//	            Iterator<String> query_it = queryStrings.iterator();
//	            while(query_it.hasNext()){
//	            	String query =query_it.next();
	            	String query =queryStrings.get(6);
	            	String sparqlstr = prefix+query;
	            	
	            	DataSource ds = null;
	        		EvaluationEngine eng = null;
	        		Collection<DataSource> sources = controller.getDatasourcesController().getAllSources().values();
	        		if(sources == null || sources.size() ==0){
	        			throw new Exception("No datasource selected");
	        		}else if(sources.size() >1){
	        			throw new Exception("Currently the reasoner can only handle one datasource");
	        		}else{
	        			ds = sources.iterator().next();
	        		}
	        		eng = new JDBCEngine(ds);
	        		OWLAPITranslator translator = new OWLAPITranslator();
	        		DLLiterOntology dllonto = translator.translate(ontology);
	        		QueryRewriter rew = new DLRPerfectReformulator(dllonto.getAssertions());
	        		List<OBDAMappingAxiom> mappings = controller.getMappingController().getMappings(ds.getSourceID());
	        		MappingViewManager viewMan = new MappingViewManager(mappings);
	        		UnfoldingMechanism unfMech = new ComplexMappingUnfolder(mappings, viewMan);
	        		JDBCUtility util = new JDBCUtility(ds.getParameter(RDBMSsourceParameterConstants.DATABASE_DRIVER));
	        		SourceQueryGenerator gen = new ComplexMappingSQLGenerator(dllonto,viewMan, util);
	            	
	        		SPARQLDatalogTranslator sparqlTranslator = new SPARQLDatalogTranslator();

	        		DatalogProgram prog = null;
	        		try {
	        			prog = sparqlTranslator.parse(sparqlstr);
	        		}
	        		catch (QueryException e) {
	        		}
	        		
	        		DatalogProgram dp = (DatalogProgram) rew.rewrite(prog);
	        		Iterator<CQIE> it = dp.getRules().iterator();
	        		for(int h=0;h<dp.getRules().size(); h++){
	        			DatalogProgram aux = new DatalogProgramImpl();
	        			aux.appendRule(dp.getRules().get(h));
	        			gen.getViewManager().storeOrgQueryHead(dp.getRules().get(h).getHead());
	        			DatalogProgram aux2 = unfMech.unfold(aux);
	        			String sql = gen.generateSourceQuery(aux2);
	        			if(!sql.equals("")){
	        				try {
								eng.execute(sql);
							} catch (Exception e) {
								e.printStackTrace();
								System.out.println("");
//								System.out.println(h);
							}
//	        				String[] st = sql.split("UNION");
//	        				for(int i=0;i<st.length;i++){
//	        					String qq = st[i];
//	        					eng.execute(qq);
//	        				}
	        			}
	        		}
	            	
//		            Statement statement = reasoner.getStatement(sparqlstr);
//		            QueryResultSet result = statement.getResultSet();
	
		            // Printing the results
		           
		            
		            
		            
		            
//		            System.out.println("Results:");
//		            if(result == null){
//		            	System.out.print("no answers");
//		            }else{
//			            int cols = result.getColumCount();
//			            while (result.nextRow()) {
//			                    for (int i = 0; i < cols; i++) {
//			                            System.out.print(result.getAsString(i+1) + " ");
//			                    }
//			                    System.out.println("");
//			            }
//			            System.out.println("-------------------");
//		            }
//	            }

	    } catch (Exception e) {
	            e.printStackTrace();
	    } finally {
	            try {
	                    reasoner.dispose();
	            } catch (Exception e)  {

	            }
	    }
	}



}
