package it.unibz.krdb.obda.owlrefplatform.core.reformulation;

import java.util.HashSet;
import java.util.Set;
import it.unibz.krdb.obda.model.Term;
import it.unibz.krdb.obda.ontology.ClassDescription;
import it.unibz.krdb.obda.ontology.PropertySomeClassRestriction;
// instead of import org.semanticweb.owlapi.model.OWLObjectSomeValuesFrom;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

//import org.semanticweb.owlapi.model.OWLClassExpression;

public class TreeWitness {
	private Set<Term> roots;
	private Set<Term> domain;
	private Set<ClassDescription> roottype;
	private PropertySomeClassRestriction gen;

	Logger	log = LoggerFactory.getLogger(TreeWitnessObsolete.class);
	
	public TreeWitness(PropertySomeClassRestriction gen, Set<Term> roots, Set<ClassDescription> roottype, Term nonroot) {
		this.gen = gen;
		this.roots = roots;
		this.roottype = roottype;
		this.domain = new HashSet<Term>(roots);
		domain.add(nonroot);
	}

	public TreeWitness(PropertySomeClassRestriction gen, Set<Term> roots, Set<ClassDescription> roottype, Set<Term> nonroots) {
		this.gen = gen;
		this.roots = roots;
		this.roottype = roottype;
		this.domain = new HashSet<Term>(roots);
		domain.addAll(nonroots);
	}

	public Set<Term> getRoots() {
		return roots;
	}
	
	public Set<Term> getDomain() {
		return domain;
	}
	
	public PropertySomeClassRestriction getGenerator() {
		return gen;
	}
	
	public Set<ClassDescription> getRootType() {
		return roottype;
	}
	
	public String toString() {
		return "tree witness generated by " + gen + "\n    with domain " + domain + " and roots " + roots + " of type " + roottype;
	}
	
	public boolean equals(Object o) {
		if (!(o instanceof TreeWitness))
			return false;
		TreeWitness tw = (TreeWitness)o;
		return (tw.gen.equals(gen) && tw.roots.equals(roots) && tw.roottype.equals(roottype) && tw.domain.equals(domain));
	}
	
	public int hashCode() {
		return gen.hashCode() ^ roots.hashCode() ^ roottype.hashCode() ^ domain.hashCode(); 
	}
}
