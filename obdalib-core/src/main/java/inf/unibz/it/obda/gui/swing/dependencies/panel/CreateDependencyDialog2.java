package inf.unibz.it.obda.gui.swing.dependencies.panel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import inf.unibz.it.obda.api.controller.APIController;
import inf.unibz.it.obda.api.controller.AssertionController;
import inf.unibz.it.obda.api.controller.DatasourcesController;
import inf.unibz.it.obda.api.controller.MappingController;
import inf.unibz.it.obda.dependencies.controller.RDBMSDisjointnessDependencyController;
import inf.unibz.it.obda.dependencies.controller.RDBMSFunctionalDependencyController;
import inf.unibz.it.obda.dependencies.controller.RDBMSInclusionDependencyController;
import inf.unibz.it.obda.dependencies.domain.imp.RDBMSDisjointnessDependency;
import inf.unibz.it.obda.dependencies.domain.imp.RDBMSFunctionalDependency;
import inf.unibz.it.obda.dependencies.domain.imp.RDBMSInclusionDependency;
import inf.unibz.it.obda.domain.OBDAMappingAxiom;
import inf.unibz.it.obda.gui.swing.mapping.tree.MappingNode;
import inf.unibz.it.obda.rdbmsgav.domain.RDBMSSQLQuery;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Vector;

import org.obda.query.domain.Term;
import org.obda.query.domain.TermFactory;
import org.obda.query.domain.imp.TermFactoryImpl;


/*
 * CreateDependencyDialog.java
 *
 * Created on Aug 14, 2009, 9:30:25 AM
 */

/**
 *	A Dialog which allows the user to create new assertion automatically
 *	The user only has to select two mappings and insert the involved
 *	terms into the dialog.
 *
 * @author Manfred Gerstgrasser
 * 		   KRDB Research Center, Free University of Bolzano/Bozen, Italy
 */

public class CreateDependencyDialog2 extends javax.swing.JDialog {

	/**
	 *
	 */
	private static final long serialVersionUID = -2300573821601725277L;
	/**
	 * The API controller
	 */
	private APIController apic = null;

	private Vector<MappingNode> selectedMappings = null;
	/**
	 * the name of the assertion which will be created
	 */
	private String assertion = null;

	private CreateDependencyDialog2 myself = null;

	private final TermFactoryImpl termFactory = (TermFactoryImpl) TermFactory.getInstance();

    /** Creates new form CreateDependencyDialog */
    public CreateDependencyDialog2(java.awt.Frame parent, boolean modal, APIController apic, Vector<MappingNode> selection, String assertion) {
        super(parent, modal);
        this.apic = apic;
        this.selectedMappings = selection;
        this.assertion = assertion;
        myself = this;
        initComponents();
        jLabelMapping1.setText("Insert varaible names:");
        jButtonCancel.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent e) {
				myself.dispose();
			}

        });

        KeyListener k = new KeyListener(){

			public void keyPressed(KeyEvent e) {

				if(e.getKeyCode() == KeyEvent.VK_ENTER){
					createAssertion();
				}else if(e.getKeyCode() == KeyEvent.VK_ESCAPE){
					myself.dispose();
				}
			}

			public void keyReleased(KeyEvent e) {}

			public void keyTyped(KeyEvent e) {}

        };
        jTextFieldMap1.addKeyListener(k);
        jLabelOutPut.setForeground(Color.RED.darker());
    }

    private boolean validateInput(){
    	String input1 = jTextFieldMap1.getText();

    	if(input1.equals("")){
    		jLabelOutPut.setText("Please insert variables for both mappings.");
    		return false;
    	}else if(input1.contains("$")){
    		jLabelOutPut.setText("Please remove $. The a reserved character and inserted automatically when needed.");
    		return false;
    	}else{
    		return true;
    	}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jLabelOutPut = new javax.swing.JLabel();
        jLabelMapping1 = new javax.swing.JLabel();
        jTextFieldMap1 = new javax.swing.JTextField();
        jLabelMessage = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButtonCreate = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelTitle.setText("Insert the variables involved in the dependency separeted by a comma:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabelTitle, gridBagConstraints);

        jLabelOutPut.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabelOutPut, gridBagConstraints);

        jLabelMapping1.setMaximumSize(new java.awt.Dimension(90, 20));
        jLabelMapping1.setMinimumSize(new java.awt.Dimension(90, 20));
        jLabelMapping1.setPreferredSize(new java.awt.Dimension(90, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);
        jPanel1.add(jLabelMapping1, gridBagConstraints);


        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);

        jTextFieldMap1.setToolTipText("insert variables for Mapping 1 seperated by a comma");
        jTextFieldMap1.setMinimumSize(new java.awt.Dimension(10, 20));
        jTextFieldMap1.setPreferredSize(new java.awt.Dimension(10, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanel1.add(jTextFieldMap1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabelMessage, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonCreate.setText("Create");
        jButtonCreate.setMaximumSize(new java.awt.Dimension(75, 22));
        jButtonCreate.setMinimumSize(new java.awt.Dimension(75, 22));
        jButtonCreate.setPreferredSize(new java.awt.Dimension(75, 22));
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAssertion();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jButtonCreate, gridBagConstraints);

        jButtonCancel.setText("Cancel");
        jButtonCancel.setMaximumSize(new java.awt.Dimension(75, 22));
        jButtonCancel.setMinimumSize(new java.awt.Dimension(75, 22));
        jButtonCancel.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jButtonCancel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When the create button is clicked, the input is read from the
     * text fields and a new assertion is added
     * @param evt
     */
    private void createAssertion() {//GEN-FIRST:event_jButtonCreateActionPerformed

    	if(validateInput()){
    		MappingController mapcon = apic.getMappingController();
        	DatasourcesController dscon = apic.getDatasourcesController();
	    	String[] variablesMap = jTextFieldMap1.getText().split(",");
        	Vector<Term> terms = new Vector<Term>();
        	for(int i=0;i<variablesMap.length;i++){
        		terms.add(termFactory.createVariable(variablesMap[i]));
        	}
	    	for(int i=0; i<selectedMappings.size(); i++){
	    		 MappingNode node1 = selectedMappings.get(i);
	    		 String id1 = node1.getUserObject().toString();
	    		 for(int j=i+1; j<selectedMappings.size(); j++){
	    			MappingNode node2 = selectedMappings.get(j);
	    			String id2 = node2.getUserObject().toString();
	    			OBDAMappingAxiom map1 = mapcon.getMapping(dscon.getCurrentDataSource().getSourceID(), id1);
	    	        OBDAMappingAxiom map2 = mapcon.getMapping(dscon.getCurrentDataSource().getSourceID(), id2);

	    	     	if(assertion.equals(RDBMSFunctionalDependency.FUNCTIONALDEPENDENCY)){
	            		AssertionController<RDBMSFunctionalDependency> con = (RDBMSFunctionalDependencyController) apic.getController(RDBMSFunctionalDependency.class);
	            		con.addAssertion(new RDBMSFunctionalDependency(dscon.getCurrentDataSource().getSourceID(), id1, id2, (RDBMSSQLQuery)map1.getSourceQuery(), (RDBMSSQLQuery)map2.getSourceQuery(), terms, terms));
	            	}else if (assertion.equals(RDBMSInclusionDependency.INCLUSIONDEPENDENCY)){
	            		AssertionController<RDBMSInclusionDependency> con = (RDBMSInclusionDependencyController) apic.getController(RDBMSInclusionDependency.class);
	            		con.addAssertion(new RDBMSInclusionDependency(dscon.getCurrentDataSource().getSourceID(), id1, id2, (RDBMSSQLQuery)map1.getSourceQuery(), (RDBMSSQLQuery)map2.getSourceQuery(), terms, terms));
	            	}else if (assertion.equals(RDBMSDisjointnessDependency.DISJOINEDNESSASSERTION)){
	            		AssertionController<RDBMSDisjointnessDependency> con = (RDBMSDisjointnessDependencyController) apic.getController(RDBMSDisjointnessDependency.class);
	            		con.addAssertion(new RDBMSDisjointnessDependency(dscon.getCurrentDataSource().getSourceID(), id1, id2, (RDBMSSQLQuery)map1.getSourceQuery(), (RDBMSSQLQuery)map2.getSourceQuery(), terms, terms));
	            	}else{
	            		throw new RuntimeException("Unknown assertion: " + assertion);
	            	}
	    		 }

	    	 }

	    	this.dispose();
    	}

    }//GEN-LAST:event_jButtonCreateActionPerformed



//    /**
//    * @param args the command line arguments
//    */
//    public void showDialog() {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                CreateDependencyDialog dialog = new CreateDependencyDialog(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelMapping1;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JLabel jLabelOutPut;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldMap1;
    // End of variables declaration//GEN-END:variables

}
