package it.unibz.krdb.config.tmappings.parser;


import it.unibz.krdb.obda.ontology.OClass;
import it.unibz.krdb.obda.ontology.PropertyExpression;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Class for TMapping Optimization. The Mappings for the classes and properties in the configuration are assumed to "exact".
 * Therefore, the TMappings for those predicates are not needed to be generated by
 * {@see it.unibz.krdb.obda.owlrefplatform.core.mappingprocessing.TMappingProcessor}
 */
public class TMappingExclusionConfiguration {

    private final Set<String> classes;

    private final Set<String> properties;

    public TMappingExclusionConfiguration(Set<String> classes, Set<String> properties){
        this.classes = classes;
        this.properties = properties;
    }

    public boolean contains(OClass cls){
        return classes.contains(cls.getPredicate().getName());
    }

    public boolean contains(PropertyExpression propertyExpression){
        return !propertyExpression.isInverse() && properties.contains(propertyExpression.getPredicate().getName());
    }

    /**
     * @return a default empty configuration
     */
    public static TMappingExclusionConfiguration empty(){
        return new TMappingExclusionConfiguration(new HashSet<String>(), new HashSet<String>());
    }

    public static TMappingExclusionConfiguration parse(String fileName) throws IOException {
        Set<String> classes = new HashSet<>();
        Set<String> properties = new HashSet<>();

        try (BufferedReader in = new BufferedReader(new FileReader(fileName))) {
            String s;

            while ((s = in.readLine()) != null) {

                String separator = " ";
                String[] s2 = s.split("\\" + separator);

                if (s2.length != 2 && s2.length != 0) {
                    throw new IllegalArgumentException(s);
                }

                if (Integer.parseInt(s2[1]) == 1) {
                    classes.add(s2[0]);
                } else if (Integer.parseInt(s2[2]) == 2) {
                    properties.add(s2[0]);
                } else {
                    throw new IllegalArgumentException(s);
                }

            }
        }

        TMappingExclusionConfiguration result = new TMappingExclusionConfiguration(classes, properties);

        return result;

    }
}
